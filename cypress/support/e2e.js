// Import commands.js using ES2015 syntax:
import './commands'

// Alternatively you can use CommonJS syntax:
// require('./commands')

// Global setup and utilities
beforeEach(() => {
  // Wait for the application to be ready
  cy.visit('/index.html')
  cy.get('body').should('be.visible')
  
  // Wait for essential scripts to load
  cy.window().should('have.property', 'lucide')
  cy.wait(1000) // Give time for dynamic content to load
})

// Custom command to test across different viewports
Cypress.Commands.add('testAcrossViewports', (testCallback) => {
  const viewports = Cypress.env('viewports')
  
  Object.entries(viewports).forEach(([name, { width, height }]) => {
    cy.log(`Testing on ${name} viewport: ${width}x${height}`)
    cy.viewport(width, height)
    cy.wait(500) // Allow layout to adjust
    testCallback(name, width, height)
  })
})

// Custom command to take screenshot with context
Cypress.Commands.add('screenshotWithContext', (name, options = {}) => {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
  const browser = Cypress.browser.name
  const viewport = `${Cypress.config('viewportWidth')}x${Cypress.config('viewportHeight')}`
  
  const filename = `${name}-${browser}-${viewport}-${timestamp}`
  cy.screenshot(filename, options)
})

// Custom command to handle GitHub issue creation
Cypress.Commands.add('createGitHubIssue', (title, description, labels = ['bug', 'cypress-qa']) => {
  const browser = Cypress.browser.name
  const viewport = `${Cypress.config('viewportWidth')}x${Cypress.config('viewportHeight')}`
  
  const issueBody = `
## Bug Report

**Browser:** ${browser}
**Viewport:** ${viewport}
**Test:** ${Cypress.currentTest.title}
**Spec:** ${Cypress.spec.name}

### Description
${description}

### Steps to Reproduce
1. Open the application in ${browser}
2. Set viewport to ${viewport}
3. ${description}

### Expected Behavior
The feature should work correctly across all supported browsers and viewport sizes.

### Additional Context
- Test Suite: Cross-browser & Viewport QA
- Generated by: Cypress E2E Tests
- Timestamp: ${new Date().toISOString()}
  `
  
  cy.task('createGitHubIssue', {
    title: `[${browser}] ${title}`,
    body: issueBody,
    labels: labels,
    screenshotPath: 'cypress/screenshots'
  })
})

// Handle uncaught exceptions to prevent test failures for minor issues
Cypress.on('uncaught:exception', (err, runnable) => {
  // Log the error but don't fail the test for certain types of errors
  if (err.message.includes('ResizeObserver loop limit exceeded') ||
      err.message.includes('Non-Error promise rejection captured') ||
      err.message.includes('Script error')) {
    console.warn('Caught exception:', err.message)
    return false
  }
  
  // For other errors, continue with normal behavior
  return true
})


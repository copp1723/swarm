{
  "version": 3,
  "file": "virtual-chat-integration.js",
  "sourceRoot": "",
  "sources": [
    "virtual-chat-integration.js"
  ],
  "sourcesContent": [
    "/**\n * Virtual Chat Integration\n * Integrates virtual scrolling with existing chat interface\n */\n\nclass VirtualChatManager {\n    constructor() {\n        this.virtualChats = new Map();\n        this.isInitialized = false;\n    }\n    \n    init() {\n        if (this.isInitialized) return;\n        \n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initializeVirtualChats());\n        } else {\n            this.initializeVirtualChats();\n        }\n        \n        this.isInitialized = true;\n    }\n    \n    initializeVirtualChats() {\n        // Find all agent chat areas and convert them to virtual chats\n        const agentIds = window.agents ? window.agents.map(agent => agent.id) : [];\n        \n        agentIds.forEach(agentId => {\n            this.createVirtualChatForAgent(agentId);\n        });\n        \n        console.log('Virtual chat containers initialized for agents:', agentIds);\n    }\n    \n    createVirtualChatForAgent(agentId) {\n        const chatContainer = document.getElementById(`chat-${agentId}`);\n        if (!chatContainer) {\n            console.warn(`Chat container not found for agent: ${agentId}`);\n            return;\n        }\n        \n        // Extract existing messages before virtualizing\n        const existingMessages = this.extractExistingMessages(chatContainer);\n        \n        // Create virtual chat container\n        const virtualChat = new VirtualChatContainer(`chat-${agentId}`, {\n            itemHeight: 120, // Average message height\n            overscan: 3,\n            scrollThreshold: 100,\n            maxMessages: 5000 // Keep 5000 messages per agent\n        });\n        \n        // Store reference\n        this.virtualChats.set(agentId, virtualChat);\n        \n        // Add existing messages to virtual chat\n        if (existingMessages.length > 0) {\n            virtualChat.addMessages(existingMessages);\n        }\n        \n        // Set up message interception\n        this.interceptMessageFunctions(agentId, virtualChat);\n        \n        console.log(`Virtual chat created for ${agentId} with ${existingMessages.length} existing messages`);\n    }\n    \n    extractExistingMessages(chatContainer) {\n        const messages = [];\n        const messageElements = chatContainer.querySelectorAll('.chat-message');\n        \n        messageElements.forEach((el, index) => {\n            try {\n                const isUser = el.classList.contains('justify-end') || el.querySelector('.bg-blue-600');\n                const content = this.extractMessageContent(el, isUser);\n                \n                if (content) {\n                    messages.push({\n                        id: `existing_${index}_${Date.now()}`,\n                        type: isUser ? 'user' : 'agent',\n                        content: content,\n                        agentName: isUser ? 'You' : this.extractAgentName(el),\n                        timestamp: new Date().toISOString(),\n                        enhanced: el.querySelector('.bg-blue-100') !== null\n                    });\n                }\n            } catch (error) {\n                console.warn('Error extracting message:', error);\n            }\n        });\n        \n        return messages;\n    }\n    \n    extractMessageContent(element, isUser) {\n        try {\n            if (isUser) {\n                // User message - extract from blue bubble\n                const bubble = element.querySelector('.bg-blue-600') || element.querySelector('.max-w-\\\\[80%\\\\]');\n                return bubble ? bubble.textContent.trim() : '';\n            } else {\n                // Agent message - extract from response area\n                const responseArea = element.querySelector('.agent-response') || \n                                   element.querySelector('.bg-gray-100') ||\n                                   element.querySelector('.max-w-\\\\[80%\\\\]');\n                return responseArea ? responseArea.innerHTML : '';\n            }\n        } catch (error) {\n            console.warn('Error extracting content:', error);\n            return '';\n        }\n    }\n    \n    extractAgentName(element) {\n        try {\n            const nameElement = element.querySelector('.text-gray-600') || \n                              element.querySelector('.font-medium');\n            return nameElement ? nameElement.textContent.trim() : 'Assistant';\n        } catch (error) {\n            return 'Assistant';\n        }\n    }\n    \n    interceptMessageFunctions(agentId, virtualChat) {\n        // Store original functions if they exist\n        const originalSendMessage = window.sendMessage;\n        const originalSendMessageButton = window.sendMessageButton;\n        \n        // Override sendMessage function for this agent\n        if (originalSendMessage) {\n            window[`sendMessage_${agentId}`] = async function(event, targetAgentId) {\n                if (targetAgentId !== agentId) {\n                    return originalSendMessage.call(this, event, targetAgentId);\n                }\n                \n                if (event.key === 'Enter') {\n                    const input = document.getElementById(`input-${agentId}`);\n                    let message = input.value.trim();\n                    \n                    // Add directory context if selected\n                    const directory = window.agentDirectories ? window.agentDirectories[agentId] : null;\n                    if (directory && !message.includes('[Working in:')) {\n                        message = `[Working in: ${directory}]\\n${message}`;\n                    }\n                    if (!message) return;\n                    \n                    const model = document.querySelector(`.model-selector[data-agent=\"${agentId}\"]`)?.value || 'openai/gpt-4';\n                    input.value = '';\n                    \n                    // Add user message to virtual chat\n                    virtualChat.addMessage({\n                        type: 'user',\n                        content: message,\n                        agentName: 'You'\n                    });\n                    \n                    // Update agent status\n                    if (window.updateAgentStatus) {\n                        window.updateAgentStatus(agentId, true);\n                    }\n                    \n                    // Add typing indicator\n                    const typingMessageId = `typing_${Date.now()}`;\n                    virtualChat.addMessage({\n                        id: typingMessageId,\n                        type: 'agent',\n                        content: 'Typing...',\n                        agentName: window.getAgentName ? window.getAgentName(agentId) : 'Assistant',\n                        isTyping: true\n                    });\n                    \n                    try {\n                        const enhancePrompt = document.getElementById('enhance-prompt-global')?.checked || false;\n                        const response = await fetch(`/api/agents/chat/${agentId}`, {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({ message, model, enhance_prompt: enhancePrompt })\n                        });\n                        const data = await response.json();\n                        \n                        // Remove typing indicator\n                        virtualChat.removeMessage(typingMessageId);\n                        \n                        if (data.success) {\n                            // Add agent response\n                            virtualChat.addMessage({\n                                type: 'agent',\n                                content: data.response,\n                                agentName: window.getAgentName ? window.getAgentName(agentId) : 'Assistant',\n                                enhanced: data.enhanced || false\n                            });\n                        } else {\n                            // Add error message\n                            virtualChat.addMessage({\n                                type: 'agent',\n                                content: `Error: ${data.error}`,\n                                agentName: 'System',\n                                isError: true\n                            });\n                        }\n                    } catch (err) {\n                        // Remove typing indicator on error\n                        virtualChat.removeMessage(typingMessageId);\n                        \n                        virtualChat.addMessage({\n                            type: 'agent',\n                            content: 'Failed to send message',\n                            agentName: 'System',\n                            isError: true\n                        });\n                    } finally {\n                        if (window.updateAgentStatus) {\n                            window.updateAgentStatus(agentId, false);\n                        }\n                    }\n                }\n            };\n        }\n        \n        // Override button send function\n        if (originalSendMessageButton) {\n            window[`sendMessageButton_${agentId}`] = function(targetAgentId) {\n                if (targetAgentId !== agentId) {\n                    return originalSendMessageButton.call(this, targetAgentId);\n                }\n                \n                const input = document.getElementById(`input-${targetAgentId}`);\n                const event = { key: 'Enter' };\n                window[`sendMessage_${agentId}`](event, agentId);\n            };\n        }\n    }\n    \n    // Public API methods\n    getVirtualChat(agentId) {\n        return this.virtualChats.get(agentId);\n    }\n    \n    addMessageToAgent(agentId, message) {\n        const virtualChat = this.virtualChats.get(agentId);\n        if (virtualChat) {\n            virtualChat.addMessage(message);\n        }\n    }\n    \n    clearAgentChat(agentId) {\n        const virtualChat = this.virtualChats.get(agentId);\n        if (virtualChat) {\n            virtualChat.clearMessages();\n        }\n    }\n    \n    scrollToBottomForAgent(agentId) {\n        const virtualChat = this.virtualChats.get(agentId);\n        if (virtualChat) {\n            virtualChat.scrollToBottom();\n        }\n    }\n    \n    getAgentMessageCount(agentId) {\n        const virtualChat = this.virtualChats.get(agentId);\n        return virtualChat ? virtualChat.getMessageCount() : 0;\n    }\n    \n    // Performance monitoring\n    getPerformanceStats() {\n        const stats = {\n            totalAgents: this.virtualChats.size,\n            totalMessages: 0,\n            memoryUsage: 0\n        };\n        \n        this.virtualChats.forEach((virtualChat, agentId) => {\n            const chatStats = virtualChat.getPerformanceStats();\n            stats.totalMessages += chatStats.totalMessages;\n            stats.memoryUsage += chatStats.memoryUsage.messages + chatStats.memoryUsage.heightCache;\n            stats[agentId] = chatStats;\n        });\n        \n        return stats;\n    }\n    \n    // Load chat history for specific agent\n    async loadChatHistory(agentId) {\n        const virtualChat = this.virtualChats.get(agentId);\n        if (!virtualChat) return;\n        \n        try {\n            const response = await fetch(`/api/agents/chat_history/${agentId}`);\n            const data = await response.json();\n            \n            if (data.success && data.history && data.history.length > 0) {\n                // Clear existing messages\n                virtualChat.clearMessages();\n                \n                // Convert history to virtual chat messages\n                const messages = data.history.map((msg, index) => ({\n                    id: `history_${index}_${Date.now()}`,\n                    type: msg.role === 'user' ? 'user' : 'agent',\n                    content: msg.content,\n                    agentName: msg.role === 'user' ? 'You' : (window.getAgentName ? window.getAgentName(agentId) : 'Assistant'),\n                    timestamp: new Date().toISOString()\n                }));\n                \n                virtualChat.addMessages(messages);\n                \n                console.log(`Loaded ${messages.length} messages for ${agentId}`);\n            }\n        } catch (err) {\n            console.error(`Error loading chat history for ${agentId}:`, err);\n        }\n    }\n    \n    // Clean up all virtual chats\n    destroy() {\n        this.virtualChats.forEach((virtualChat) => {\n            virtualChat.destroy();\n        });\n        this.virtualChats.clear();\n        this.isInitialized = false;\n    }\n}\n\n// Create global virtual chat manager\nwindow.virtualChatManager = new VirtualChatManager();\n\n// Enhanced message formatting for virtual chat\nif (!window.formatAgentResponse) {\n    window.formatAgentResponse = function(text) {\n        // Create a temporary div to safely escape HTML first\n        const tempDiv = document.createElement('div');\n        tempDiv.textContent = text;\n        let formatted = tempDiv.innerHTML;\n        \n        // Apply formatting (same as original but with proper escaping)\n        formatted = formatted.replace(/^###\\\\s+(.+)$/gm, '<h3 class=\"font-bold text-lg text-gray-900 mt-6 mb-3 border-b-2 border-blue-200 pb-2\">$1</h3>');\n        formatted = formatted.replace(/^##\\\\s+(.+)$/gm, '<h4 class=\"font-semibold text-base text-gray-800 mt-3 mb-2\">$1</h4>');\n        formatted = formatted.replace(/^(\\\\d+)\\\\.\\\\s+(.+)$/gm, '<li class=\"ml-6 mb-2\"><span class=\"font-semibold text-blue-600\">$1.</span> $2</li>');\n        formatted = formatted.replace(/^[-*]\\\\s+(.+)$/gm, '<li class=\"ml-6 mb-1\">\u2022 $1</li>');\n        formatted = formatted.replace(/(<li class=\"ml-6[^\"]*\">.+<\\/li>\\n?)+/g, function(match) {\n            return '<ul class=\"list-none space-y-1 my-3 bg-gray-50 p-3 rounded-lg border-l-3 border-blue-400\">' + match + '</ul>';\n        });\n        formatted = formatted.replace(/```(\\\\w+)?\\\\n?([^`]+)```/g, function(match, lang, code) {\n            const language = lang || 'plaintext';\n            return `<div class=\"my-3\">\n                <div class=\"bg-gray-700 text-gray-300 px-3 py-1 text-xs rounded-t-lg\">${language}</div>\n                <pre class=\"bg-gray-800 text-gray-100 p-4 rounded-b-lg overflow-x-auto\"><code>${code.trim()}</code></pre>\n            </div>`;\n        });\n        formatted = formatted.replace(/`([^`]+)`/g, '<code class=\"bg-gray-200 px-1.5 py-0.5 rounded text-sm font-mono text-gray-800\">$1</code>');\n        formatted = formatted.replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, '<strong class=\"font-semibold text-gray-900\">$1</strong>');\n        formatted = formatted.replace(/\\\\n/g, '<br>');\n        \n        return formatted;\n    };\n}\n\n// Override original functions to work with virtual chat\nfunction enhanceOriginalFunctions() {\n    // Store original functions\n    const originalSendMessage = window.sendMessage;\n    const originalSendMessageButton = window.sendMessageButton;\n    const originalClearChat = window.clearChat;\n    const originalLoadChatHistory = window.loadChatHistory;\n    \n    // Enhanced sendMessage that works with virtual chat\n    if (originalSendMessage) {\n        window.sendMessage = function(event, agentId) {\n            const virtualChat = window.virtualChatManager.getVirtualChat(agentId);\n            if (virtualChat) {\n                // Use virtual chat enhanced function\n                const enhancedFunction = window[`sendMessage_${agentId}`];\n                if (enhancedFunction) {\n                    return enhancedFunction.call(this, event, agentId);\n                }\n            }\n            // Fallback to original\n            return originalSendMessage.call(this, event, agentId);\n        };\n    }\n    \n    // Enhanced sendMessageButton\n    if (originalSendMessageButton) {\n        window.sendMessageButton = function(agentId) {\n            const virtualChat = window.virtualChatManager.getVirtualChat(agentId);\n            if (virtualChat) {\n                const enhancedFunction = window[`sendMessageButton_${agentId}`];\n                if (enhancedFunction) {\n                    return enhancedFunction.call(this, agentId);\n                }\n            }\n            return originalSendMessageButton.call(this, agentId);\n        };\n    }\n    \n    // Enhanced clearChat\n    if (originalClearChat) {\n        window.clearChat = async function(agentId) {\n            // Clear virtual chat\n            window.virtualChatManager.clearAgentChat(agentId);\n            \n            // Call original API\n            return originalClearChat.call(this, agentId);\n        };\n    }\n    \n    // Enhanced loadChatHistory\n    if (originalLoadChatHistory) {\n        window.loadChatHistory = async function(agentId) {\n            // Use virtual chat loader\n            return window.virtualChatManager.loadChatHistory(agentId);\n        };\n    }\n}\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Wait a bit for the original interface to initialize\n    setTimeout(() => {\n        window.virtualChatManager.init();\n        enhanceOriginalFunctions();\n        \n        // Add performance monitoring to window\n        window.getChatPerformanceStats = () => window.virtualChatManager.getPerformanceStats();\n        \n        console.log('Virtual chat system initialized successfully');\n    }, 500);\n});\n\n// Debug utilities\nwindow.debugVirtualChat = {\n    getStats: () => window.virtualChatManager.getPerformanceStats(),\n    getChat: (agentId) => window.virtualChatManager.getVirtualChat(agentId),\n    scrollToBottom: (agentId) => window.virtualChatManager.scrollToBottomForAgent(agentId),\n    addTestMessages: (agentId, count = 100) => {\n        const virtualChat = window.virtualChatManager.getVirtualChat(agentId);\n        if (virtualChat) {\n            for (let i = 0; i < count; i++) {\n                virtualChat.addMessage({\n                    type: i % 2 === 0 ? 'user' : 'agent',\n                    content: `Test message ${i + 1}. This is a longer message to test the virtual scrolling performance with varied message lengths. Lorem ipsum dolor sit amet, consectetur adipiscing elit.`,\n                    agentName: i % 2 === 0 ? 'You' : 'Assistant'\n                });\n            }\n        }\n    }\n};"
  ],
  "names": [],
  "mappings
}
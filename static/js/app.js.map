{
  "version": 3,
  "file": "app.js",
  "sourceRoot": "",
  "sources": [
    "app.js"
  ],
  "sourcesContent": [
    "// Main Application Entry Point\nimport { AgentManager } from './agents/agent-manager.js';\nimport { CollaborationModal } from './components/collaboration-modal.js';\nimport { WorkflowVisualization } from './components/workflow-visualization.js';\nimport { AgentStatusManager } from './components/agent-status-manager.js';\nimport { WebSocketService } from './services/websocket.js';\nimport { StorageService } from './services/storage.js';\nimport { showNotification } from './utils/dom-helpers.js';\nimport { initApiKeySetup } from './components/api-key-setup.js';\n\nclass App {\n    constructor() {\n        this.agentManager = new AgentManager();\n        this.wsService = new WebSocketService();\n        this.storage = new StorageService();\n        this.collaborationModal = null;\n        this.workflowVisualization = new WorkflowVisualization();\n        this.agentStatusManager = new AgentStatusManager();\n    }\n\n    async init() {\n        try {\n            // Initialize API key setup if needed\n            initApiKeySetup();\n            \n            // Initialize core components\n            await this.agentManager.init();\n            \n            // Initialize WebSocket\n            this.wsService.connect();\n            \n            // Initialize collaboration modal\n            this.collaborationModal = new CollaborationModal(this.agentManager, this.wsService);\n            await this.collaborationModal.init();\n            \n            // Initialize advanced UI features\n            this.agentStatusManager.init();\n            \n            // Setup WebSocket listeners for advanced features\n            this.setupAdvancedWebSocketListeners();\n            \n            // Setup global event listeners\n            this.setupGlobalListeners();\n            \n            // Load preferences\n            this.loadGlobalPreferences();\n            \n            // Show welcome notification\n            showNotification('MCP Agent Chat Interface loaded successfully', 'success');\n            \n        } catch (error) {\n            console.error('Failed to initialize app:', error);\n            showNotification('Failed to initialize application', 'error');\n        }\n    }\n\n    setupAdvancedWebSocketListeners() {\n        // Listen for agent communication events to update status\n        this.wsService.on('agent_communication', (data) => {\n            const agentId = data.from_agent || data.communication?.from_agent;\n            if (agentId) {\n                this.agentStatusManager.updateAgentStatus(agentId, 'working', 'Communicating...');\n            }\n        });\n        \n        // Listen for task progress events\n        this.wsService.on('task_progress', (data) => {\n            // Update individual agent statuses if provided\n            if (data.agent_statuses) {\n                Object.entries(data.agent_statuses).forEach(([agentId, status]) => {\n                    this.agentStatusManager.updateAgentStatus(\n                        agentId,\n                        status.status,\n                        status.activity,\n                        status.progress\n                    );\n                });\n            }\n        });\n        \n        // Listen for task completion\n        this.wsService.on('task_complete', (data) => {\n            // Mark all agents as completed\n            const allStatuses = this.agentStatusManager.getAllAgentStatuses();\n            Object.keys(allStatuses).forEach(agentId => {\n                if (allStatuses[agentId].status === 'working') {\n                    this.agentStatusManager.updateAgentStatus(agentId, 'completed', 'Task completed');\n                }\n            });\n        });\n        \n        // Listen for task errors\n        this.wsService.on('task_error', (data) => {\n            // Mark relevant agents as error state\n            showNotification('Task error occurred', 'error');\n        });\n    }\n\n    setupGlobalListeners() {\n        // Global enhance prompt toggle\n        const enhanceToggle = document.getElementById('enhance-prompt-global');\n        if (enhanceToggle) {\n            enhanceToggle.addEventListener('change', (e) => {\n                this.storage.setEnhancePromptSetting(e.target.checked);\n            });\n        }\n        \n        // Handle keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            // Cmd/Ctrl + K to focus on current agent's input\n            if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n                e.preventDefault();\n                const currentAgent = this.agentManager.currentAgentId;\n                if (currentAgent) {\n                    const input = document.getElementById(`input-${currentAgent}`);\n                    if (input) input.focus();\n                }\n            }\n            \n            // Esc to close modals\n            if (e.key === 'Escape') {\n                if (this.collaborationModal && this.collaborationModal.modal && !this.collaborationModal.modal.classList.contains('hidden')) {\n                    this.collaborationModal.close();\n                }\n            }\n        });\n        \n        // Handle window resize\n        let resizeTimeout;\n        window.addEventListener('resize', () => {\n            clearTimeout(resizeTimeout);\n            resizeTimeout = setTimeout(() => {\n                this.handleResize();\n            }, 250);\n        });\n    }\n\n    loadGlobalPreferences() {\n        // Load enhance prompt setting\n        const enhanceToggle = document.getElementById('enhance-prompt-global');\n        if (enhanceToggle) {\n            enhanceToggle.checked = this.storage.getEnhancePromptSetting();\n        }\n    }\n\n    handleResize() {\n        // Handle responsive behavior\n        if (window.innerWidth < 768) {\n            // Mobile view - ensure sidebar is closed by default\n            const sidebar = document.getElementById('sidebar');\n            if (sidebar && !sidebar.classList.contains('collapsed')) {\n                sidebar.classList.remove('open');\n            }\n        }\n    }\n\n    // Public API for extensions\n    getAgentManager() {\n        return this.agentManager;\n    }\n\n    getWebSocketService() {\n        return this.wsService;\n    }\n\n    getStorageService() {\n        return this.storage;\n    }\n}\n\n// Global error handler\nwindow.addEventListener('error', (event) => {\n    console.error('Global error:', event.error);\n    showNotification('An unexpected error occurred', 'error');\n});\n\n// Initialize app when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        window.app = new App();\n        window.app.init();\n    });\n} else {\n    // DOM already loaded\n    window.app = new App();\n    window.app.init();\n}\n\n// Export for debugging and extensions\nexport default App;"
  ],
  "names": [],
  "mappings
}
{
  "version": 3,
  "file": "agent-enhancements.js",
  "sourceRoot": "",
  "sources": [
    "agent-enhancements.js"
  ],
  "sourcesContent": [
    "/**\n * Agent UI Enhancements\n * Integrates new agent capabilities and features into the existing UI\n */\n\nclass AgentUIEnhancements {\n    constructor() {\n        this.agentProfiles = {\n            product_01: {\n                name: \"Product Agent\",\n                role: \"PLANNER\",\n                icon: \"package\",\n                color: \"#8B5CF6\",\n                description: \"Product management, user stories, roadmaps, and PRDs\",\n                capabilities: [\"product planning\", \"user story creation\", \"roadmap development\", \"filesystem access\", \"memory\"]\n            },\n            coder_01: {\n                name: \"Coding Agent\",\n                role: \"DEVELOPER\", \n                icon: \"code\",\n                color: \"#3B82F6\",\n                description: \"Code writing, refactoring, debugging, and optimization\",\n                capabilities: [\"coding\", \"debugging\", \"refactoring\", \"code review\", \"filesystem access\", \"memory\"]\n            },\n            bug_01: {\n                name: \"Bug Agent\",\n                role: \"INCIDENT\",\n                icon: \"alert-circle\",\n                color: \"#EF4444\",\n                description: \"Incident management, error analysis, and RCA documents\",\n                capabilities: [\"incident management\", \"error analysis\", \"root cause analysis\", \"monitoring\", \"memory\"]\n            },\n            tester_01: {\n                name: \"QA Engineer\",\n                role: \"TESTER\",\n                icon: \"check-circle\",\n                color: \"#10B981\",\n                description: \"Testing, bug identification, and test planning\",\n                capabilities: [\"testing\", \"bug identification\", \"test planning\", \"filesystem access\", \"memory\"]\n            },\n            devops_01: {\n                name: \"DevOps Engineer\",\n                role: \"DEVOPS\",\n                icon: \"server\",\n                color: \"#F59E0B\",\n                description: \"Infrastructure, deployment, and CI/CD\",\n                capabilities: [\"deployment\", \"CI/CD\", \"infrastructure\", \"monitoring\", \"filesystem access\"]\n            },\n            general_01: {\n                name: \"General Assistant\",\n                role: \"GENERAL\",\n                icon: \"help-circle\",\n                color: \"#6B7280\",\n                description: \"Versatile assistant for any task\",\n                capabilities: [\"general assistance\", \"filesystem access\", \"memory\"]\n            },\n            email_01: {\n                name: \"Email Agent\",\n                role: \"EMAIL\",\n                icon: \"mail\",\n                color: \"#EC4899\",\n                description: \"Email communication and webhook processing\",\n                capabilities: [\"email ingestion\", \"webhook processing\", \"approval workflows\", \"notification management\"]\n            }\n        };\n\n        this.systemStatus = {\n            database: true,\n            redis: true,\n            websocket: true,\n            mcp_server: true\n        };\n\n        this.init();\n    }\n\n    init() {\n        this.updateAgentProfiles();\n        this.addSystemStatusBar();\n        this.enhanceAgentCards();\n        this.addWorkflowTemplates();\n        this.setupAgentCommunication();\n        this.addMemoryViewer();\n        this.startStatusMonitoring();\n    }\n\n    updateAgentProfiles() {\n        // Update agent window titles and descriptions\n        Object.entries(this.agentProfiles).forEach(([agentId, profile]) => {\n            const agentWindow = document.querySelector(`#agent-window-${agentId}`);\n            if (agentWindow) {\n                // Update title\n                const titleElement = agentWindow.querySelector('.agent-title');\n                if (titleElement) {\n                    titleElement.innerHTML = `\n                        <i data-lucide=\"${profile.icon}\" style=\"color: ${profile.color};\"></i>\n                        ${profile.name}\n                        <span class=\"agent-role-badge\" style=\"background: ${profile.color}20; color: ${profile.color};\">\n                            ${profile.role}\n                        </span>\n                    `;\n                }\n\n                // Add description\n                const headerElement = agentWindow.querySelector('.agent-header');\n                if (headerElement && !headerElement.querySelector('.agent-description')) {\n                    const descDiv = document.createElement('div');\n                    descDiv.className = 'agent-description';\n                    descDiv.textContent = profile.description;\n                    descDiv.style.cssText = 'font-size: 12px; color: #6b7280; margin-top: 4px;';\n                    headerElement.appendChild(descDiv);\n                }\n\n                // Add capability badges\n                this.addCapabilityBadges(agentWindow, profile);\n            }\n        });\n    }\n\n    addCapabilityBadges(agentWindow, profile) {\n        const headerElement = agentWindow.querySelector('.agent-header');\n        if (!headerElement || headerElement.querySelector('.agent-capabilities')) return;\n\n        const capabilitiesDiv = document.createElement('div');\n        capabilitiesDiv.className = 'agent-capabilities';\n        capabilitiesDiv.style.cssText = 'display: flex; flex-wrap: wrap; gap: 6px; margin-top: 8px;';\n\n        const capabilityIcons = {\n            'filesystem access': 'folder',\n            'memory': 'brain',\n            'coding': 'terminal',\n            'debugging': 'bug',\n            'monitoring': 'activity',\n            'email ingestion': 'mail',\n            'webhook processing': 'webhook'\n        };\n\n        profile.capabilities.forEach(capability => {\n            const badge = document.createElement('span');\n            badge.className = 'capability-badge';\n            badge.title = capability;\n            badge.style.cssText = `\n                display: inline-flex;\n                align-items: center;\n                padding: 2px 8px;\n                background: #f3f4f6;\n                border-radius: 4px;\n                font-size: 11px;\n                gap: 4px;\n                cursor: help;\n                transition: all 0.2s ease;\n            `;\n            \n            const icon = capabilityIcons[capability] || 'circle';\n            badge.innerHTML = `<i data-lucide=\"${icon}\" style=\"width: 12px; height: 12px;\"></i>`;\n            \n            badge.addEventListener('mouseenter', () => {\n                badge.style.background = profile.color + '20';\n                badge.style.transform = 'translateY(-1px)';\n            });\n            \n            badge.addEventListener('mouseleave', () => {\n                badge.style.background = '#f3f4f6';\n                badge.style.transform = '';\n            });\n            \n            capabilitiesDiv.appendChild(badge);\n        });\n\n        headerElement.appendChild(capabilitiesDiv);\n        if (window.lucide) lucide.createIcons();\n    }\n\n    addSystemStatusBar() {\n        if (document.querySelector('.system-status-bar')) return;\n\n        const statusBar = document.createElement('div');\n        statusBar.className = 'system-status-bar';\n        statusBar.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 40px;\n            background: white;\n            border-bottom: 1px solid #e5e7eb;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 0 20px;\n            z-index: 1000;\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n        `;\n\n        statusBar.innerHTML = `\n            <div class=\"system-title\" style=\"font-weight: 600; display: flex; align-items: center; gap: 8px;\">\n                <i data-lucide=\"cpu\" style=\"width: 16px; height: 16px;\"></i>\n                Multi-Agent System\n            </div>\n            <div class=\"system-status\" style=\"display: flex; gap: 20px;\">\n                ${Object.entries(this.systemStatus).map(([service, status]) => `\n                    <div class=\"status-item\" data-service=\"${service}\" style=\"display: flex; align-items: center; gap: 6px; font-size: 13px;\">\n                        <span class=\"status-dot ${status ? 'active' : 'error'}\" style=\"\n                            width: 6px;\n                            height: 6px;\n                            border-radius: 50%;\n                            background: ${status ? '#10b981' : '#ef4444'};\n                            ${status ? 'animation: pulse 2s infinite;' : ''}\n                        \"></span>\n                        <span style=\"color: #6b7280;\">${service.replace('_', ' ').toUpperCase()}</span>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n\n        document.body.insertBefore(statusBar, document.body.firstChild);\n        document.body.style.paddingTop = '40px';\n        \n        // Add pulse animation\n        const style = document.createElement('style');\n        style.textContent = `\n            @keyframes pulse {\n                0% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4); }\n                70% { box-shadow: 0 0 0 8px rgba(16, 185, 129, 0); }\n                100% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0); }\n            }\n        `;\n        document.head.appendChild(style);\n        \n        if (window.lucide) lucide.createIcons();\n    }\n\n    enhanceAgentCards() {\n        // Add status indicators to agent windows\n        document.querySelectorAll('.agent-window').forEach(window => {\n            const header = window.querySelector('.agent-header');\n            if (header && !header.querySelector('.agent-status-indicator')) {\n                const indicator = document.createElement('div');\n                indicator.className = 'agent-status-indicator';\n                indicator.style.cssText = `\n                    position: absolute;\n                    top: 10px;\n                    right: 10px;\n                    width: 8px;\n                    height: 8px;\n                    border-radius: 50%;\n                    background: #10b981;\n                    animation: pulse 2s infinite;\n                `;\n                header.style.position = 'relative';\n                header.appendChild(indicator);\n            }\n        });\n    }\n\n    addWorkflowTemplates() {\n        const collaborationHub = document.querySelector('#collaboration-hub');\n        if (!collaborationHub || collaborationHub.querySelector('.workflow-templates')) return;\n\n        const templatesSection = document.createElement('div');\n        templatesSection.className = 'workflow-templates';\n        templatesSection.style.cssText = 'margin-bottom: 20px;';\n        \n        templatesSection.innerHTML = `\n            <h4 style=\"margin-bottom: 10px; font-weight: 600;\">Quick Templates</h4>\n            <div class=\"template-buttons\" style=\"display: flex; flex-wrap: wrap; gap: 8px;\">\n                <button class=\"template-btn\" data-template=\"code_review\" style=\"\n                    padding: 6px 12px;\n                    border: 1px solid #e5e7eb;\n                    border-radius: 6px;\n                    background: white;\n                    font-size: 13px;\n                    cursor: pointer;\n                    transition: all 0.2s ease;\n                \">\n                    <i data-lucide=\"git-pull-request\" style=\"width: 14px; height: 14px; display: inline-block; vertical-align: middle; margin-right: 4px;\"></i>\n                    Code Review\n                </button>\n                <button class=\"template-btn\" data-template=\"feature_dev\" style=\"\n                    padding: 6px 12px;\n                    border: 1px solid #e5e7eb;\n                    border-radius: 6px;\n                    background: white;\n                    font-size: 13px;\n                    cursor: pointer;\n                    transition: all 0.2s ease;\n                \">\n                    <i data-lucide=\"package-plus\" style=\"width: 14px; height: 14px; display: inline-block; vertical-align: middle; margin-right: 4px;\"></i>\n                    Feature Development\n                </button>\n                <button class=\"template-btn\" data-template=\"incident\" style=\"\n                    padding: 6px 12px;\n                    border: 1px solid #e5e7eb;\n                    border-radius: 6px;\n                    background: white;\n                    font-size: 13px;\n                    cursor: pointer;\n                    transition: all 0.2s ease;\n                \">\n                    <i data-lucide=\"alert-triangle\" style=\"width: 14px; height: 14px; display: inline-block; vertical-align: middle; margin-right: 4px;\"></i>\n                    Incident Response\n                </button>\n            </div>\n        `;\n\n        const taskInput = collaborationHub.querySelector('#collab-task');\n        if (taskInput) {\n            taskInput.parentElement.insertBefore(templatesSection, taskInput);\n        }\n\n        // Add hover effects\n        templatesSection.querySelectorAll('.template-btn').forEach(btn => {\n            btn.addEventListener('mouseenter', () => {\n                btn.style.background = '#f3f4f6';\n                btn.style.borderColor = '#3b82f6';\n            });\n            btn.addEventListener('mouseleave', () => {\n                btn.style.background = 'white';\n                btn.style.borderColor = '#e5e7eb';\n            });\n            btn.addEventListener('click', () => this.loadWorkflowTemplate(btn.dataset.template));\n        });\n\n        if (window.lucide) lucide.createIcons();\n    }\n\n    loadWorkflowTemplate(templateId) {\n        const templates = {\n            code_review: {\n                task: \"Review the codebase for quality, security, and best practices\",\n                agents: ['product_01', 'coder_01', 'tester_01', 'bug_01']\n            },\n            feature_dev: {\n                task: \"Develop a new feature with full testing and deployment\",\n                agents: ['product_01', 'coder_01', 'tester_01', 'bug_01', 'devops_01']\n            },\n            incident: {\n                task: \"Investigate and resolve production incident\",\n                agents: ['bug_01', 'coder_01', 'tester_01', 'devops_01']\n            }\n        };\n\n        const template = templates[templateId];\n        if (!template) return;\n\n        // Set task description\n        const taskInput = document.querySelector('#collab-task');\n        if (taskInput) {\n            taskInput.value = template.task;\n        }\n\n        // Select agents\n        document.querySelectorAll('#collaboration-hub input[type=\"checkbox\"]').forEach(cb => {\n            cb.checked = template.agents.includes(cb.value);\n        });\n\n        // Show notification\n        this.showNotification(`Loaded \"${templateId.replace('_', ' ')}\" template`);\n    }\n\n    setupAgentCommunication() {\n        // Listen for agent messages in WebSocket\n        if (window.socket) {\n            window.socket.on('agent_communication', (data) => {\n                this.displayAgentCommunication(data);\n            });\n        }\n    }\n\n    displayAgentCommunication(message) {\n        const collabMessages = document.querySelector('#collab-messages');\n        if (!collabMessages) return;\n\n        const commDiv = document.createElement('div');\n        commDiv.className = 'agent-communication-message';\n        commDiv.style.cssText = `\n            margin: 12px 0;\n            padding: 12px;\n            background: linear-gradient(135deg, #E0E7FF, #DBEAFE);\n            border-radius: 8px;\n            border-left: 3px solid #3b82f6;\n            animation: slideIn 0.3s ease;\n        `;\n\n        commDiv.innerHTML = `\n            <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 6px; font-size: 13px;\">\n                <strong style=\"color: ${this.agentProfiles[message.from_agent]?.color || '#333'};\">\n                    ${this.agentProfiles[message.from_agent]?.name || message.from_agent}\n                </strong>\n                <span style=\"color: #3b82f6;\">\u2192</span>\n                <strong style=\"color: ${this.agentProfiles[message.to_agent]?.color || '#333'};\">\n                    ${this.agentProfiles[message.to_agent]?.name || message.to_agent}\n                </strong>\n                <span style=\"margin-left: auto; color: #6b7280; font-size: 11px;\">\n                    ${new Date(message.timestamp).toLocaleTimeString()}\n                </span>\n            </div>\n            <div style=\"color: #374151;\">${message.message}</div>\n            ${message.response ? `\n                <div style=\"margin-top: 8px; padding: 8px; background: rgba(255,255,255,0.5); border-radius: 4px;\">\n                    <div style=\"font-size: 11px; font-weight: 600; color: #10b981; margin-bottom: 4px;\">RESPONSE</div>\n                    <div style=\"color: #374151;\">${message.response}</div>\n                </div>\n            ` : ''}\n        `;\n\n        collabMessages.appendChild(commDiv);\n        collabMessages.scrollTop = collabMessages.scrollHeight;\n\n        // Add slide-in animation\n        if (!document.querySelector('#agent-comm-styles')) {\n            const style = document.createElement('style');\n            style.id = 'agent-comm-styles';\n            style.textContent = `\n                @keyframes slideIn {\n                    from {\n                        opacity: 0;\n                        transform: translateX(-20px);\n                    }\n                    to {\n                        opacity: 1;\n                        transform: translateX(0);\n                    }\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    }\n\n    addMemoryViewer() {\n        // Add memory button to each agent\n        document.querySelectorAll('.agent-window').forEach(window => {\n            const agentId = window.id.replace('agent-window-', '');\n            const profile = this.agentProfiles[agentId];\n            \n            if (profile && profile.capabilities.includes('memory')) {\n                const controls = window.querySelector('.agent-controls');\n                if (controls && !controls.querySelector('.memory-btn')) {\n                    const memoryBtn = document.createElement('button');\n                    memoryBtn.className = 'memory-btn';\n                    memoryBtn.innerHTML = '<i data-lucide=\"brain\"></i>';\n                    memoryBtn.title = 'View agent memory';\n                    memoryBtn.style.cssText = `\n                        padding: 6px;\n                        border: 1px solid #e5e7eb;\n                        border-radius: 4px;\n                        background: white;\n                        cursor: pointer;\n                        transition: all 0.2s ease;\n                    `;\n                    \n                    memoryBtn.addEventListener('click', () => this.toggleMemoryViewer(agentId));\n                    controls.appendChild(memoryBtn);\n                }\n            }\n        });\n\n        if (window.lucide) lucide.createIcons();\n    }\n\n    toggleMemoryViewer(agentId) {\n        const window = document.querySelector(`#agent-window-${agentId}`);\n        let memoryPanel = window.querySelector('.memory-panel');\n        \n        if (memoryPanel) {\n            memoryPanel.style.display = memoryPanel.style.display === 'none' ? 'block' : 'none';\n        } else {\n            memoryPanel = document.createElement('div');\n            memoryPanel.className = 'memory-panel';\n            memoryPanel.style.cssText = `\n                background: #f9fafb;\n                border-top: 1px solid #e5e7eb;\n                padding: 16px;\n                max-height: 200px;\n                overflow-y: auto;\n            `;\n            \n            memoryPanel.innerHTML = `\n                <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px;\">\n                    <i data-lucide=\"brain\" style=\"width: 16px; height: 16px;\"></i>\n                    <strong>Agent Memory</strong>\n                    <span style=\"margin-left: auto; font-size: 12px; color: #6b7280;\">Loading...</span>\n                </div>\n                <div class=\"memory-list\"></div>\n            `;\n            \n            window.appendChild(memoryPanel);\n            if (window.lucide) lucide.createIcons();\n            \n            // Load memory data\n            this.loadAgentMemory(agentId);\n        }\n    }\n\n    async loadAgentMemory(agentId) {\n        try {\n            const response = await fetch(`/api/memory/${agentId}`);\n            const memories = await response.json();\n            \n            const memoryPanel = document.querySelector(`#agent-window-${agentId} .memory-panel`);\n            const memoryList = memoryPanel.querySelector('.memory-list');\n            const statusSpan = memoryPanel.querySelector('span');\n            \n            statusSpan.textContent = `${memories.length} memories`;\n            \n            if (memories.length === 0) {\n                memoryList.innerHTML = '<div style=\"color: #6b7280; font-size: 14px;\">No memories yet</div>';\n            } else {\n                memoryList.innerHTML = memories.map(memory => `\n                    <div style=\"padding: 8px; margin-bottom: 8px; background: white; border-radius: 4px; border: 1px solid #e5e7eb;\">\n                        <div style=\"font-size: 14px; margin-bottom: 4px;\">${memory.content}</div>\n                        <div style=\"display: flex; gap: 12px; font-size: 11px; color: #6b7280;\">\n                            <span>${new Date(memory.created).toLocaleDateString()}</span>\n                            <span style=\"color: #10b981;\">${memory.relevance_score || 85}% relevant</span>\n                        </div>\n                    </div>\n                `).join('');\n            }\n        } catch (error) {\n            console.error('Failed to load agent memory:', error);\n        }\n    }\n\n    startStatusMonitoring() {\n        // Poll health endpoint every 30 seconds\n        setInterval(async () => {\n            try {\n                const response = await fetch('/health');\n                const health = await response.json();\n                \n                // Update status indicators\n                Object.entries(health).forEach(([service, status]) => {\n                    const item = document.querySelector(`.status-item[data-service=\"${service}\"]`);\n                    if (item) {\n                        const dot = item.querySelector('.status-dot');\n                        if (status.status === 'healthy') {\n                            dot.classList.add('active');\n                            dot.classList.remove('error');\n                        } else {\n                            dot.classList.add('error');\n                            dot.classList.remove('active');\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Health check failed:', error);\n            }\n        }, 30000);\n    }\n\n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = 'ui-notification';\n        notification.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            padding: 12px 20px;\n            background: ${type === 'error' ? '#ef4444' : '#3b82f6'};\n            color: white;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            z-index: 1001;\n            animation: slideUp 0.3s ease;\n        `;\n        notification.textContent = message;\n        \n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.style.animation = 'slideDown 0.3s ease';\n            setTimeout(() => notification.remove(), 300);\n        }, 3000);\n        \n        // Add animation\n        if (!document.querySelector('#notification-styles')) {\n            const style = document.createElement('style');\n            style.id = 'notification-styles';\n            style.textContent = `\n                @keyframes slideUp {\n                    from { transform: translateY(100px); opacity: 0; }\n                    to { transform: translateY(0); opacity: 1; }\n                }\n                @keyframes slideDown {\n                    from { transform: translateY(0); opacity: 1; }\n                    to { transform: translateY(100px); opacity: 0; }\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    }\n}\n\n// Initialize enhancements when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        window.agentUIEnhancements = new AgentUIEnhancements();\n    });\n} else {\n    window.agentUIEnhancements = new AgentUIEnhancements();\n}\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = AgentUIEnhancements;\n}"
  ],
  "names": [],
  "mappings
}
{
  "version": 3,
  "file": "agent-status-manager.js",
  "sourceRoot": "",
  "sources": [
    "agent-status-manager.js"
  ],
  "sourcesContent": [
    "// Agent Status Manager for Real-time UI Updates\nimport { createElement, updateIcons } from '../utils/dom-helpers.js';\n\nexport class AgentStatusManager {\n    constructor() {\n        this.agentStates = new Map();\n        this.statusUpdateCallbacks = new Map();\n    }\n\n    init() {\n        this.setupGlobalAgentIndicators();\n        this.setupStatusObserver();\n    }\n\n    setupGlobalAgentIndicators() {\n        // Enhanced sidebar agent status indicators\n        const agentNavItems = document.querySelectorAll('.agent-nav-item');\n        \n        agentNavItems.forEach(navItem => {\n            const agentId = this.extractAgentIdFromElement(navItem);\n            if (!agentId) return;\n\n            // Add enhanced status indicator if not already present\n            let statusContainer = navItem.querySelector('.agent-status-container');\n            if (!statusContainer) {\n                statusContainer = createElement('div', 'agent-status-container flex items-center space-x-1');\n                \n                // Create status indicator\n                const statusIndicator = createElement('div', 'status-indicator w-2 h-2 rounded-full bg-gray-400');\n                statusIndicator.id = `sidebar-status-${agentId}`;\n                \n                // Create activity text\n                const activityText = createElement('span', 'activity-text text-xs text-gray-500 hidden');\n                activityText.id = `sidebar-activity-${agentId}`;\n                \n                statusContainer.appendChild(statusIndicator);\n                statusContainer.appendChild(activityText);\n                \n                // Add to the nav item\n                const existingStatus = navItem.querySelector('.status-indicator');\n                if (existingStatus) {\n                    existingStatus.parentNode.replaceChild(statusContainer, existingStatus);\n                } else {\n                    navItem.appendChild(statusContainer);\n                }\n            }\n\n            // Initialize agent state\n            this.agentStates.set(agentId, {\n                status: 'idle',\n                activity: null,\n                lastUpdate: Date.now()\n            });\n        });\n\n        updateIcons();\n    }\n\n    setupStatusObserver() {\n        // Create floating status panel for active agents\n        const statusPanel = this.createFloatingStatusPanel();\n        document.body.appendChild(statusPanel);\n        \n        // Auto-hide panel when no agents are active\n        setInterval(() => {\n            this.updateFloatingPanel();\n        }, 1000);\n    }\n\n    createFloatingStatusPanel() {\n        const panel = createElement('div', 'fixed top-20 right-4 bg-white rounded-lg shadow-lg border border-gray-200 p-4 max-w-sm z-40 transform translate-x-full transition-transform duration-300');\n        panel.id = 'floating-agent-status';\n        \n        panel.innerHTML = `\n            <div class=\"flex items-center justify-between mb-3\">\n                <h4 class=\"text-sm font-semibold text-gray-900 flex items-center\">\n                    <i data-lucide=\"activity\" class=\"w-4 h-4 mr-2 text-blue-600\"></i>\n                    Agent Activity\n                </h4>\n                <button id=\"hide-status-panel\" class=\"text-gray-400 hover:text-gray-600\">\n                    <i data-lucide=\"x\" class=\"w-4 h-4\"></i>\n                </button>\n            </div>\n            <div id=\"active-agents-list\" class=\"space-y-2\">\n                <!-- Active agents will be populated here -->\n            </div>\n        `;\n\n        // Hide panel button\n        panel.querySelector('#hide-status-panel').addEventListener('click', () => {\n            this.hideFloatingPanel();\n        });\n\n        updateIcons();\n        return panel;\n    }\n\n    updateAgentStatus(agentId, status, activity = null, progress = null) {\n        // Update agent state\n        this.agentStates.set(agentId, {\n            status,\n            activity,\n            progress,\n            lastUpdate: Date.now()\n        });\n\n        // Update sidebar indicator\n        this.updateSidebarStatus(agentId, status, activity);\n        \n        // Update floating panel\n        this.updateFloatingPanel();\n        \n        // Trigger callbacks\n        const callbacks = this.statusUpdateCallbacks.get(agentId) || [];\n        callbacks.forEach(callback => {\n            try {\n                callback({ agentId, status, activity, progress });\n            } catch (error) {\n                console.error('Error in agent status callback:', error);\n            }\n        });\n    }\n\n    updateSidebarStatus(agentId, status, activity) {\n        const statusIndicator = document.getElementById(`sidebar-status-${agentId}`);\n        const activityText = document.getElementById(`sidebar-activity-${agentId}`);\n        \n        if (!statusIndicator) return;\n\n        // Reset classes\n        statusIndicator.className = 'status-indicator w-2 h-2 rounded-full';\n        \n        // Update status indicator\n        switch (status) {\n            case 'idle':\n                statusIndicator.classList.add('bg-gray-400');\n                break;\n            case 'working':\n                statusIndicator.classList.add('bg-yellow-400', 'animate-pulse');\n                break;\n            case 'completed':\n                statusIndicator.classList.add('bg-green-400');\n                // Auto-reset to idle after 3 seconds\n                setTimeout(() => {\n                    if (this.agentStates.get(agentId)?.status === 'completed') {\n                        this.updateAgentStatus(agentId, 'idle');\n                    }\n                }, 3000);\n                break;\n            case 'error':\n                statusIndicator.classList.add('bg-red-400');\n                // Auto-reset to idle after 5 seconds\n                setTimeout(() => {\n                    if (this.agentStates.get(agentId)?.status === 'error') {\n                        this.updateAgentStatus(agentId, 'idle');\n                    }\n                }, 5000);\n                break;\n        }\n\n        // Update activity text\n        if (activityText) {\n            if (activity && status !== 'idle') {\n                activityText.textContent = activity;\n                activityText.classList.remove('hidden');\n            } else {\n                activityText.classList.add('hidden');\n            }\n        }\n\n        // Add tooltip with agent name and status\n        const navItem = statusIndicator.closest('.agent-nav-item');\n        if (navItem) {\n            const statusText = this.getStatusText(status, activity);\n            navItem.title = statusText;\n        }\n    }\n\n    updateFloatingPanel() {\n        const panel = document.getElementById('floating-agent-status');\n        const activeAgentsList = document.getElementById('active-agents-list');\n        \n        if (!panel || !activeAgentsList) return;\n\n        // Get active agents\n        const activeAgents = Array.from(this.agentStates.entries())\n            .filter(([agentId, state]) => state.status !== 'idle' && (Date.now() - state.lastUpdate) < 10000)\n            .sort(([, a], [, b]) => b.lastUpdate - a.lastUpdate);\n\n        if (activeAgents.length === 0) {\n            this.hideFloatingPanel();\n            return;\n        }\n\n        // Show panel\n        panel.classList.remove('translate-x-full');\n        panel.classList.add('translate-x-0');\n\n        // Update agent list\n        activeAgentsList.innerHTML = activeAgents.map(([agentId, state]) => {\n            const statusColor = this.getStatusColor(state.status);\n            const statusText = this.getStatusText(state.status, state.activity);\n            \n            return `\n                <div class=\"flex items-center space-x-2 p-2 bg-gray-50 rounded-lg\">\n                    <div class=\"w-2 h-2 rounded-full ${statusColor} ${state.status === 'working' ? 'animate-pulse' : ''}\"></div>\n                    <div class=\"flex-1\">\n                        <div class=\"text-sm font-medium text-gray-900\">${agentId}</div>\n                        <div class=\"text-xs text-gray-600\">${statusText}</div>\n                        ${state.progress !== null ? `\n                            <div class=\"w-full bg-gray-200 rounded-full h-1 mt-1\">\n                                <div class=\"bg-blue-500 h-1 rounded-full transition-all duration-300\" style=\"width: ${state.progress}%\"></div>\n                            </div>\n                        ` : ''}\n                    </div>\n                    <div class=\"text-xs text-gray-400\">\n                        ${this.getTimeAgo(state.lastUpdate)}\n                    </div>\n                </div>\n            `;\n        }).join('');\n    }\n\n    hideFloatingPanel() {\n        const panel = document.getElementById('floating-agent-status');\n        if (panel) {\n            panel.classList.remove('translate-x-0');\n            panel.classList.add('translate-x-full');\n        }\n    }\n\n    getStatusColor(status) {\n        switch (status) {\n            case 'working': return 'bg-yellow-400';\n            case 'completed': return 'bg-green-400';\n            case 'error': return 'bg-red-400';\n            default: return 'bg-gray-400';\n        }\n    }\n\n    getStatusText(status, activity) {\n        if (activity) {\n            return activity;\n        }\n        \n        switch (status) {\n            case 'working': return 'Processing...';\n            case 'completed': return 'Task completed';\n            case 'error': return 'Error occurred';\n            default: return 'Ready';\n        }\n    }\n\n    getTimeAgo(timestamp) {\n        const seconds = Math.floor((Date.now() - timestamp) / 1000);\n        if (seconds < 60) return `${seconds}s ago`;\n        const minutes = Math.floor(seconds / 60);\n        if (minutes < 60) return `${minutes}m ago`;\n        const hours = Math.floor(minutes / 60);\n        return `${hours}h ago`;\n    }\n\n    extractAgentIdFromElement(element) {\n        // Try to extract agent ID from element ID or data attributes\n        if (element.id && element.id.startsWith('nav-')) {\n            return element.id.replace('nav-', '');\n        }\n        \n        if (element.dataset.agentId) {\n            return element.dataset.agentId;\n        }\n\n        // Try to find agent ID in child elements\n        const agentIdElement = element.querySelector('[data-agent-id]');\n        if (agentIdElement) {\n            return agentIdElement.dataset.agentId;\n        }\n\n        return null;\n    }\n\n    // Subscribe to agent status updates\n    onAgentStatusUpdate(agentId, callback) {\n        if (!this.statusUpdateCallbacks.has(agentId)) {\n            this.statusUpdateCallbacks.set(agentId, []);\n        }\n        this.statusUpdateCallbacks.get(agentId).push(callback);\n    }\n\n    // Unsubscribe from agent status updates\n    offAgentStatusUpdate(agentId, callback) {\n        const callbacks = this.statusUpdateCallbacks.get(agentId);\n        if (callbacks) {\n            const index = callbacks.indexOf(callback);\n            if (index > -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n    }\n\n    // Get current status of an agent\n    getAgentStatus(agentId) {\n        return this.agentStates.get(agentId) || { status: 'idle', activity: null, progress: null };\n    }\n\n    // Get all agent statuses\n    getAllAgentStatuses() {\n        return Object.fromEntries(this.agentStates);\n    }\n\n    // Reset all agent statuses\n    resetAllAgentStatuses() {\n        this.agentStates.clear();\n        this.setupGlobalAgentIndicators();\n        this.hideFloatingPanel();\n    }\n\n    // Simulate agent activity for demo purposes\n    simulateAgentActivity(agentId, duration = 5000) {\n        this.updateAgentStatus(agentId, 'working', 'Simulating work...');\n        \n        let progress = 0;\n        const interval = setInterval(() => {\n            progress += Math.random() * 25;\n            if (progress >= 100) {\n                progress = 100;\n                this.updateAgentStatus(agentId, 'completed', 'Task completed', progress);\n                clearInterval(interval);\n            } else {\n                this.updateAgentStatus(agentId, 'working', 'Processing...', Math.round(progress));\n            }\n        }, duration / 10);\n    }\n}\n\n"
  ],
  "names": [],
  "mappings
}
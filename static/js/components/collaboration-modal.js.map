{
  "version": 3,
  "file": "collaboration-modal.js",
  "sourceRoot": "",
  "sources": [
    "collaboration-modal.js"
  ],
  "sourcesContent": [
    "// Collaboration Modal Component\nimport { AGENTS, getAgentById, getAgentByName, getAgentColor } from '../agents/agent-config.js';\nimport { AgentAPI } from '../services/api.js';\nimport { DirectoryBrowser } from './directory-browser.js';\nimport { createElement, escapeHtml, showNotification, updateIcons } from '../utils/dom-helpers.js';\nimport { formatAgentResponse } from '../utils/formatters.js';\nimport { startGroupChat } from './group-chat.js';\n\nexport class CollaborationModal {\n    constructor(agentManager, websocketService) {\n        this.agentManager = agentManager;\n        this.wsService = websocketService;\n        this.api = new AgentAPI();\n        this.directoryBrowser = new DirectoryBrowser();\n        this.modal = null;\n        this.activeTaskId = null;\n        this.templates = [];\n    }\n\n    async init() {\n        await this.loadWorkflowTemplates();\n        this.setupEventListeners();\n    }\n\n    setupEventListeners() {\n        // Open modal button\n        const openBtn = document.getElementById('open-collab-btn');\n        if (openBtn) {\n            openBtn.addEventListener('click', () => this.open());\n        }\n        \n        // Listen for agent mention events from chat interfaces\n        document.addEventListener('agent-mention', (event) => {\n            this.handleAgentMention(event.detail);\n        });\n        \n        // WebSocket listeners\n        if (this.wsService) {\n            this.wsService.on('agent_communication', (data) => {\n                if (data.task_id === this.activeTaskId) {\n                    this.handleAgentCommunication(data);\n                }\n            });\n            \n            this.wsService.on('task_progress', (data) => {\n                if (data.task_id === this.activeTaskId) {\n                    this.updateProgress(data);\n                }\n            });\n        }\n    }\n\n    open() {\n        // Grab (or create) the modal element\n        this.modal = document.getElementById('collab-modal');\n\n        // Re-create if it doesn\u2019t exist *or* was injected but left empty\n        if (!this.modal || this.modal.children.length === 0) {\n            /* eslint-disable no-console */\n            console.log('CollaborationModal: creating modal markup\u2026');\n            /* eslint-enable no-console */\n            this.createModal();\n        }\n\n        if (this.modal) {\n            this.modal.classList.remove('hidden');\n            // Give the browser a moment to paint new DOM before we query for inner elements\n            setTimeout(() => {\n                this.populateAgentCheckboxes();\n                this.populateTemplates();\n            }, 10);\n        } else {\n            // This should never happen, but log in case\n            /* eslint-disable no-console */\n            console.error('CollaborationModal: failed to create or locate collab-modal container');\n            /* eslint-enable no-console */\n        }\n    }\n\n    close() {\n        if (this.modal) {\n            this.modal.classList.add('hidden');\n        }\n        this.activeTaskId = null;\n    }\n\n    createModal() {\n        this.modal = createElement('div', 'hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50');\n        this.modal.id = 'collab-modal';\n        \n        this.modal.innerHTML = `\n            <div class=\"bg-white rounded-xl shadow-2xl w-full max-w-3xl mx-4 max-h-[90vh] overflow-y-auto\">\n                <div class=\"p-6 border-b border-gray-200\">\n                    <div class=\"flex items-center justify-between\">\n                        <h2 class=\"text-2xl font-bold text-gray-900\">Multi-Agent Collaboration</h2>\n                        <button id=\"close-collab-modal\" class=\"text-gray-400 hover:text-gray-600\">\n                            <i data-lucide=\"x\" class=\"w-6 h-6\"></i>\n                        </button>\n                    </div>\n                </div>\n                \n                <div class=\"p-6\">\n                    <!-- Workflow Template Selection -->\n                    <div class=\"mb-6\">\n                        <label class=\"block text-sm font-medium text-gray-700 mb-2\">Workflow Template (Optional)</label>\n                        <select id=\"workflow-template\" class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\">\n                            <option value=\"\">Select a workflow template...</option>\n                        </select>\n                    </div>\n                    \n                    <!-- Task Description -->\n                    <div class=\"mb-6\">\n                        <label class=\"block text-sm font-medium text-gray-700 mb-2\">Task Description</label>\n                        <textarea id=\"collab-task\" rows=\"3\" class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\" placeholder=\"Describe the task you want the agents to collaborate on...\"></textarea>\n                    </div>\n                    \n                    <!-- Agent Selection -->\n                    <div class=\"mb-6\">\n                        <label class=\"block text-sm font-medium text-gray-700 mb-2\">Select Agents</label>\n                        <p class=\"text-xs text-gray-500 mb-2\">Note: General Assistant is always included for executive summary</p>\n                        <div class=\"grid grid-cols-2 gap-3\" id=\"agent-checkboxes\">\n                            <!-- Checkboxes will be populated here -->\n                        </div>\n                    </div>\n                    \n                    <!-- Working Directory -->\n                    <div class=\"mb-6\">\n                        <label class=\"block text-sm font-medium text-gray-700 mb-2\">Working Directory</label>\n                        <div class=\"flex items-center space-x-2\">\n                            <button id=\"select-collab-dir\" class=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors border border-gray-300\">\n                                <i data-lucide=\"folder\" class=\"w-5 h-5\"></i>\n                            </button>\n                            <input type=\"text\" \n                                   id=\"collab-working-dir\" \n                                   class=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm\" \n                                   placeholder=\"Select or enter working directory...\" \n                                   value=\"/Users/copp1723/Desktop\">\n                        </div>\n                    </div>\n                    \n                    <!-- Submit Button -->\n                    <div class=\"flex items-center justify-between\">\n                        <label class=\"flex items-center\">\n                            <input type=\"checkbox\" id=\"enhance-prompt-collab\" class=\"mr-2\" checked>\n                            <span class=\"text-sm text-gray-700\">Enhance prompt</span>\n                        </label>\n                        <button id=\"start-collab\" class=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n                            Start Collaboration\n                        </button>\n                    </div>\n                    \n                    <!-- Results Area -->\n                    <div id=\"collab-results\" class=\"mt-6 hidden\">\n                        <!-- Enhanced progress tracking will be populated here -->\n                    </div>\n                    \n                    <!-- Advanced Progress Tracking Dashboard -->\n                    <div id=\"progress-dashboard\" class=\"mt-6 hidden\">\n                        <div class=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 border border-blue-200\">\n                            <div class=\"flex items-center justify-between mb-4\">\n                                <h3 class=\"text-lg font-semibold text-gray-900 flex items-center\">\n                                    <i data-lucide=\"activity\" class=\"w-5 h-5 mr-2 text-blue-600\"></i>\n                                    Collaboration Progress\n                                </h3>\n                                <span id=\"task-status\" class=\"px-3 py-1 text-sm font-medium rounded-full bg-blue-100 text-blue-700\">Initializing...</span>\n                            </div>\n                            \n                            <!-- Overall Progress Bar -->\n                            <div class=\"mb-6\">\n                                <div class=\"flex items-center justify-between text-sm mb-2\">\n                                    <span class=\"text-gray-600\">Overall Progress</span>\n                                    <span id=\"overall-progress-text\" class=\"font-medium text-gray-900\">0%</span>\n                                </div>\n                                <div class=\"w-full bg-gray-200 rounded-full h-3 shadow-inner\">\n                                    <div id=\"overall-progress-bar\" class=\"bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-500 ease-out shadow-sm\" style=\"width: 0%\"></div>\n                                </div>\n                            </div>\n                            \n                            <!-- Agent Status Grid -->\n                            <div id=\"agent-status-grid\" class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                                <!-- Agent status cards will be populated here -->\n                            </div>\n                            \n                            <!-- Timeline -->\n                            <div class=\"border-t border-gray-200 pt-4\">\n                                <h4 class=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\n                                    <i data-lucide=\"clock\" class=\"w-4 h-4 mr-2\"></i>\n                                    Activity Timeline\n                                </h4>\n                                <div id=\"activity-timeline\" class=\"space-y-2 max-h-32 overflow-y-auto\">\n                                    <!-- Timeline events will be populated here -->\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <!-- Collaboration Chat Window -->\n                    <div id=\"collab-chat-window\" class=\"mt-6 hidden\">\n                        <div class=\"border-t pt-4\">\n                            <h3 class=\"text-lg font-semibold mb-3 flex items-center\">\n                                <i data-lucide=\"messages-square\" class=\"w-5 h-5 mr-2\"></i>\n                                Collaboration Progress\n                            </h3>\n                            <div id=\"collab-chat-area\" class=\"bg-gray-50 rounded-lg p-4 max-h-96 overflow-y-auto space-y-3\">\n                                <!-- Agent responses will appear here -->\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(this.modal);\n        \n        // Attach event listeners\n        document.getElementById('close-collab-modal').addEventListener('click', () => this.close());\n        document.getElementById('select-collab-dir').addEventListener('click', () => this.selectDirectory());\n        document.getElementById('start-collab').addEventListener('click', () => this.startCollaboration());\n        \n        const templateSelect = document.getElementById('workflow-template');\n        templateSelect.addEventListener('change', () => this.applyTemplate());\n        \n        updateIcons();\n\n        // Debug log to confirm modal created\n        /* eslint-disable no-console */\n        console.log('CollaborationModal: modal DOM created successfully');\n        /* eslint-enable no-console */\n    }\n\n    populateAgentCheckboxes() {\n        const container = document.getElementById('agent-checkboxes');\n        if (!container) {\n            /* eslint-disable no-console */\n            console.warn('CollaborationModal: #agent-checkboxes container not found; skipping checkbox population.');\n            /* eslint-enable no-console */\n            return;\n        }\n        container.innerHTML = '';\n        \n        AGENTS.forEach(agent => {\n            const label = createElement('label', 'flex items-center space-x-2 cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors');\n            label.innerHTML = `\n                <input type=\"checkbox\" id=\"collab-${agent.id}\" class=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\">\n                <span class=\"text-sm text-gray-700\">${agent.name}</span>\n            `;\n            container.appendChild(label);\n        });\n    }\n\n    populateTemplates() {\n        const select = document.getElementById('workflow-template');\n        if (!select) {\n            /* eslint-disable no-console */\n            console.warn('CollaborationModal: #workflow-template container not found; skipping template population.');\n            /* eslint-enable no-console */\n            return;\n        }\n        select.innerHTML = '<option value=\"\">Select a workflow template...</option>';\n        \n        this.templates.forEach(template => {\n            const option = createElement('option');\n            option.value = template.id;\n            option.textContent = `${template.name} - ${template.description}`;\n            option.dataset.taskDescription = template.task_description;\n            option.dataset.taggedAgents = JSON.stringify(template.tagged_agents);\n            option.dataset.sequential = template.sequential;\n            select.appendChild(option);\n        });\n    }\n\n    applyTemplate() {\n        const select = document.getElementById('workflow-template');\n        const selectedOption = select.options[select.selectedIndex];\n        \n        if (selectedOption.value) {\n            // Set task description\n            document.getElementById('collab-task').value = selectedOption.dataset.taskDescription;\n            \n            // Clear all checkboxes first\n            AGENTS.forEach(agent => {\n                const checkbox = document.getElementById(`collab-${agent.id}`);\n                if (checkbox) checkbox.checked = false;\n            });\n            \n            // Select the agents from the template\n            const taggedAgents = JSON.parse(selectedOption.dataset.taggedAgents);\n            taggedAgents.forEach(agentId => {\n                const checkbox = document.getElementById(`collab-${agentId}`);\n                if (checkbox) checkbox.checked = true;\n            });\n        }\n    }\n\n    async selectDirectory() {\n        const currentDir = document.getElementById('collab-working-dir').value;\n        const selectedPath = await this.directoryBrowser.open(currentDir);\n        if (selectedPath) {\n            document.getElementById('collab-working-dir').value = selectedPath;\n            showNotification(`Working directory selected: ${selectedPath}`, 'success');\n        }\n    }\n\n    async loadWorkflowTemplates() {\n        try {\n            const data = await this.api.getWorkflowTemplates();\n            this.templates = data.templates || [];\n        } catch (err) {\n            console.error('Error loading workflow templates:', err);\n        }\n    }\n\n    async startCollaboration() {\n        const task = document.getElementById('collab-task').value.trim();\n        const workingDir = document.getElementById('collab-working-dir').value.trim();\n        const taggedAgents = [];\n        \n        AGENTS.forEach(agent => {\n            const checkbox = document.getElementById(`collab-${agent.id}`);\n            if (checkbox && checkbox.checked) {\n                taggedAgents.push(agent.id);\n            }\n        });\n        \n        // Always include General Assistant for executive summary\n        if (!taggedAgents.includes('general_01')) {\n            taggedAgents.push('general_01');\n            const generalCheckbox = document.getElementById('collab-general_01');\n            if (generalCheckbox) generalCheckbox.checked = true;\n        }\n\n        if (!task || taggedAgents.length === 0 || !workingDir) {\n            showNotification('Please provide a task description, select at least one agent, and specify a working directory.', 'error');\n            return;\n        }\n\n        const resultsDiv = document.getElementById('collab-results');\n        resultsDiv.classList.remove('hidden');\n        resultsDiv.innerHTML = `\n            <div class=\"flex items-center space-x-3\">\n                <div class=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600\"></div>\n                <span class=\"text-sm text-gray-600\">Starting collaboration...</span>\n            </div>\n        `;\n\n        try {\n            const enhancePrompt = document.getElementById('enhance-prompt-collab').checked;\n            const data = await this.api.startCollaboration(task, taggedAgents, workingDir, false, enhancePrompt);\n            \n            if (data.success) {\n                this.activeTaskId = data.task_id;\n                \n                resultsDiv.innerHTML = `\n                    <div class=\"space-y-3\">\n                        <div class=\"flex items-center space-x-2 text-green-600\">\n                            <i data-lucide=\"check-circle\" class=\"w-5 h-5\"></i>\n                            <span class=\"font-medium\">Collaboration started successfully!</span>\n                        </div>\n                        <div class=\"text-sm text-gray-600\">\n                            <p>Task ID: ${data.task_id}</p>\n                            <p>Agents: ${taggedAgents.map(id => getAgentById(id).name).join(', ')}</p>\n                        </div>\n                        <div class=\"mt-4\">\n                            <div class=\"flex items-center justify-between text-sm\">\n                                <span class=\"text-gray-600\">Progress</span>\n                                <span class=\"font-medium\" id=\"collab-progress\">0%</span>\n                            </div>\n                            <div class=\"w-full bg-gray-200 rounded-full h-2 mt-1\">\n                                <div id=\"collab-progress-bar\" class=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" style=\"width: 0%\"></div>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                updateIcons();\n                \n                // Show the collaboration chat window\n                document.getElementById('collab-chat-window').classList.remove('hidden');\n                document.getElementById('collab-chat-area').innerHTML = '<div class=\"text-center text-gray-500\">Waiting for agent responses...</div>';\n                \n                // Show enhanced progress dashboard\n                this.showProgressDashboard(taggedAgents);\n                \n                // Join WebSocket room\n                if (this.wsService) {\n                    this.wsService.joinTask(data.task_id);\n                }\n                \n                // Start polling for updates\n                this.pollStatus();\n                \n                showNotification('Tip: You can also view responses in individual agent chat windows', 'info');\n            } else {\n                resultsDiv.innerHTML = `\n                    <div class=\"flex items-center space-x-2 text-red-600\">\n                        <i data-lucide=\"alert-circle\" class=\"w-5 h-5\"></i>\n                        <span>Error: ${escapeHtml(data.error)}</span>\n                    </div>\n                `;\n                updateIcons();\n            }\n        } catch (err) {\n            resultsDiv.innerHTML = `\n                <div class=\"flex items-center space-x-2 text-red-600\">\n                    <i data-lucide=\"alert-circle\" class=\"w-5 h-5\"></i>\n                    <span>Error: Failed to start collaboration</span>\n                </div>\n            `;\n            updateIcons();\n        }\n    }\n\n    async pollStatus() {\n        if (!this.activeTaskId) return;\n        \n        try {\n            const data = await this.api.getConversation(this.activeTaskId);\n            \n            if (data.success) {\n                // Enhanced progress update with database-backed data\n                this.updateProgress({ \n                    progress: data.progress || 0,\n                    status: data.status,\n                    agent_statuses: data.agent_statuses // New field from database\n                });\n                this.updateChatArea(data);\n                \n                // Update timeline with persistent events\n                if (data.timeline_events) {\n                    data.timeline_events.forEach(event => {\n                        this.addTimelineEvent(event.message, event.type, new Date(event.timestamp), event.agent_id);\n                    });\n                }\n                \n                // Continue polling if not completed\n                if (data.status !== 'completed' && data.status !== 'error') {\n                    setTimeout(() => this.pollStatus(), 2000);\n                } else {\n                    if (data.status === 'completed') {\n                        showNotification('Collaboration completed successfully!', 'success');\n                        // Mark all working agents as completed\n                        const taggedAgents = data.agents || [];\n                        taggedAgents.forEach(agentId => {\n                            this.updateAgentStatus(agentId, 'completed', 100, 'Task completed successfully');\n                        });\n                    } else {\n                        showNotification('Collaboration encountered an error', 'error');\n                    }\n                }\n            }\n        } catch (err) {\n            console.error('Error polling collaboration status:', err);\n            // Stop polling if task not found - but with database persistence, tasks should persist\n            if (err.message && err.message.includes('404')) {\n                this.activeTaskId = null;\n                showNotification('Task not found. Please check if it was completed or removed.', 'warning');\n            }\n        }\n    }\n\n    updateProgress(data) {\n        const progressText = document.getElementById('collab-progress');\n        const progressBar = document.getElementById('collab-progress-bar');\n        \n        if (progressText && data.progress !== undefined) {\n            progressText.textContent = `${data.progress}%`;\n        }\n        if (progressBar && data.progress !== undefined) {\n            progressBar.style.width = `${data.progress}%`;\n        }\n    }\n\n    updateChatArea(data) {\n        const chatArea = document.getElementById('collab-chat-area');\n        if (!chatArea) return;\n        \n        const allCommunications = data.all_communications || [];\n        \n        if (allCommunications.length > 0 || (data.conversations && data.conversations.length > 0)) {\n            // Clear loading message if present\n            if (chatArea.querySelector('.text-gray-500')) {\n                chatArea.innerHTML = '';\n            }\n            \n            // Process communications\n            allCommunications.forEach(comm => {\n                if (comm.type === 'agent_communication') {\n                    this.displayAgentCommunication(comm);\n                }\n            });\n            \n            // Process conversations\n            if (data.conversations) {\n                this.displayConversations(data.conversations);\n            }\n        }\n    }\n\n    displayAgentCommunication(comm) {\n        const chatArea = document.getElementById('collab-chat-area');\n        const messageId = `agent-comm-${comm.message_id}`;\n        \n        if (document.getElementById(messageId)) {\n            // Update existing message\n            const existingDiv = document.getElementById(messageId);\n            if (comm.response && !existingDiv.querySelector('.agent-communication-response')) {\n                const responseDiv = createElement('div', 'agent-communication-response');\n                responseDiv.innerHTML = `<strong>Response:</strong> ${formatAgentResponse(comm.response)}`;\n                existingDiv.appendChild(responseDiv);\n            }\n            return;\n        }\n        \n        const commDiv = createElement('div', 'agent-communication mb-4');\n        commDiv.id = messageId;\n        commDiv.innerHTML = `\n            <div class=\"agent-communication-header\">\n                <div class=\"agent-communication-arrow\">\n                    <i data-lucide=\"send\" class=\"w-3 h-3\"></i>\n                    <span>${comm.from_agent}</span>\n                    <i data-lucide=\"arrow-right\" class=\"w-3 h-3\"></i>\n                    <span>${comm.to_agent}</span>\n                </div>\n                <span class=\"text-xs text-gray-500\">${new Date(comm.timestamp).toLocaleTimeString()}</span>\n            </div>\n            <div class=\"agent-communication-message\">\n                <strong>Request:</strong> ${formatAgentResponse(comm.message)}\n            </div>\n            ${comm.response ? `\n            <div class=\"agent-communication-response\">\n                <strong>Response:</strong> ${formatAgentResponse(comm.response)}\n            </div>\n            ` : '<div class=\"text-sm text-gray-500 italic\">Awaiting response...</div>'}\n        `;\n        \n        chatArea.appendChild(commDiv);\n        updateIcons();\n        chatArea.scrollTop = chatArea.scrollHeight;\n    }\n\n    displayConversations(conversations) {\n        const chatArea = document.getElementById('collab-chat-area');\n        \n        // Group by agent\n        const agentMessages = {};\n        conversations.forEach(conv => {\n            const agentId = conv.agent_id;\n            if (!agentMessages[agentId]) {\n                agentMessages[agentId] = [];\n            }\n            agentMessages[agentId].push(conv);\n        });\n        \n        Object.keys(agentMessages).forEach(agentName => {\n            let messagesToShow = agentMessages[agentName];\n            \n            // For General Assistant, only show the last message\n            if (agentName === 'General Assistant') {\n                messagesToShow = [messagesToShow[messagesToShow.length - 1]];\n            }\n            \n            messagesToShow.forEach(conv => {\n                const messageId = `collab-msg-${conv.agent_id}-${new Date(conv.timestamp).getTime()}`;\n                if (!document.getElementById(messageId)) {\n                    const agent = getAgentByName(conv.agent_id);\n                    const messageDiv = createElement('div', 'bg-white rounded-lg p-3 shadow-sm border border-gray-200 mb-3');\n                    messageDiv.id = messageId;\n                    \n                    const agentColor = agent ? getAgentColor(agent.color) : 'bg-gray-500';\n                    const agentIcon = agent ? agent.icon : 'message-circle';\n                    const isExecutiveSummary = conv.agent_id === 'General Assistant' && conv.content.includes('Executive Summary');\n                    \n                    messageDiv.innerHTML = `\n                        <div class=\"flex items-start space-x-3\">\n                            <div class=\"flex-shrink-0 w-8 h-8 ${agentColor} rounded-lg flex items-center justify-center\">\n                                <i data-lucide=\"${agentIcon}\" class=\"w-4 h-4 text-white\"></i>\n                            </div>\n                            <div class=\"flex-1\">\n                                <div class=\"flex items-center space-x-2 mb-1\">\n                                    <span class=\"font-semibold text-sm text-gray-900\">${conv.agent_id}</span>\n                                    <span class=\"text-xs text-gray-500\">${new Date(conv.timestamp).toLocaleTimeString()}</span>\n                                    ${isExecutiveSummary ? '<span class=\"text-xs bg-blue-100 text-blue-700 px-2 py-0.5 rounded\">Executive Summary</span>' : ''}\n                                </div>\n                                <div class=\"bg-gray-50 rounded-lg p-3 border border-gray-200\">\n                                    <div class=\"agent-response text-sm\">\n                                        ${formatAgentResponse(conv.content)}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n                    \n                    chatArea.appendChild(messageDiv);\n                    updateIcons();\n                    chatArea.scrollTop = chatArea.scrollHeight;\n                }\n            });\n        });\n    }\n\n    handleAgentCommunication(data) {\n        const comm = data.communication || data;\n        this.displayAgentCommunication(comm);\n        showNotification(`${comm.from_agent} is communicating with ${comm.to_agent}`, 'info');\n    }\n\n    async handleAgentMention(detail) {\n        // This method is kept for backward compatibility\n        // The new group chat functionality is handled directly in chat-interface.js\n        console.log('Agent mention event received (handled by chat-interface):', detail);\n    }\n\n    showProgressDashboard(taggedAgents) {\n        const dashboard = document.getElementById('progress-dashboard');\n        if (!dashboard) return;\n\n        dashboard.classList.remove('hidden');\n\n        // Initialize agent status cards\n        this.initializeAgentStatusCards(taggedAgents);\n        \n        // Add initial timeline entry\n        this.addTimelineEvent('Collaboration started', 'system', new Date());\n    }\n\n    initializeAgentStatusCards(taggedAgents) {\n        const statusGrid = document.getElementById('agent-status-grid');\n        if (!statusGrid) return;\n\n        statusGrid.innerHTML = '';\n\n        taggedAgents.forEach(agentId => {\n            const agent = getAgentById(agentId);\n            if (!agent) return;\n\n            const agentCard = createElement('div', 'bg-white rounded-lg border border-gray-200 p-4 shadow-sm');\n            agentCard.id = `agent-status-${agentId}`;\n            \n            const agentColor = getAgentColor(agent.color);\n            \n            agentCard.innerHTML = `\n                <div class=\"flex items-center justify-between mb-3\">\n                    <div class=\"flex items-center space-x-2\">\n                        <div class=\"w-8 h-8 ${agentColor} rounded-lg flex items-center justify-center\">\n                            <i data-lucide=\"${agent.icon}\" class=\"w-4 h-4 text-white\"></i>\n                        </div>\n                        <span class=\"font-medium text-gray-900\">${agent.name}</span>\n                    </div>\n                    <div class=\"flex items-center space-x-1\">\n                        <div class=\"w-2 h-2 rounded-full bg-gray-300\" id=\"status-indicator-${agentId}\"></div>\n                        <span class=\"text-xs text-gray-500\" id=\"status-text-${agentId}\">Waiting</span>\n                    </div>\n                </div>\n                \n                <div class=\"space-y-2\">\n                    <div class=\"flex justify-between text-xs\">\n                        <span class=\"text-gray-600\">Progress</span>\n                        <span id=\"agent-progress-${agentId}\" class=\"font-medium\">0%</span>\n                    </div>\n                    <div class=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div id=\"agent-progress-bar-${agentId}\" class=\"${agentColor.replace('bg-', 'bg-')} h-2 rounded-full transition-all duration-300\" style=\"width: 0%\"></div>\n                    </div>\n                </div>\n                \n                <div class=\"mt-3 text-xs text-gray-600\" id=\"agent-activity-${agentId}\">\n                    Ready to start...\n                </div>\n            `;\n            \n            statusGrid.appendChild(agentCard);\n        });\n        \n        updateIcons();\n    }\n\n    updateAgentStatus(agentId, status, progress = null, activity = null) {\n        const statusIndicator = document.getElementById(`status-indicator-${agentId}`);\n        const statusText = document.getElementById(`status-text-${agentId}`);\n        const progressText = document.getElementById(`agent-progress-${agentId}`);\n        const progressBar = document.getElementById(`agent-progress-bar-${agentId}`);\n        const activityText = document.getElementById(`agent-activity-${agentId}`);\n\n        if (statusIndicator && statusText) {\n            switch (status) {\n                case 'working':\n                    statusIndicator.className = 'w-2 h-2 rounded-full bg-yellow-400 animate-pulse';\n                    statusText.textContent = 'Working';\n                    break;\n                case 'completed':\n                    statusIndicator.className = 'w-2 h-2 rounded-full bg-green-400';\n                    statusText.textContent = 'Complete';\n                    break;\n                case 'error':\n                    statusIndicator.className = 'w-2 h-2 rounded-full bg-red-400';\n                    statusText.textContent = 'Error';\n                    break;\n                default:\n                    statusIndicator.className = 'w-2 h-2 rounded-full bg-gray-300';\n                    statusText.textContent = 'Waiting';\n            }\n        }\n\n        if (progress !== null && progressText && progressBar) {\n            progressText.textContent = `${progress}%`;\n            progressBar.style.width = `${progress}%`;\n        }\n\n        if (activity && activityText) {\n            activityText.textContent = activity;\n        }\n    }\n\n    addTimelineEvent(event, type = 'system', timestamp = new Date(), agentId = null) {\n        const timeline = document.getElementById('activity-timeline');\n        if (!timeline) return;\n\n        const eventDiv = createElement('div', 'flex items-center space-x-2 text-xs');\n        \n        let iconClass = 'w-3 h-3 text-gray-500';\n        let textClass = 'text-gray-600';\n        \n        if (type === 'agent') {\n            iconClass = 'w-3 h-3 text-blue-500';\n            textClass = 'text-blue-700';\n        } else if (type === 'error') {\n            iconClass = 'w-3 h-3 text-red-500';\n            textClass = 'text-red-700';\n        } else if (type === 'complete') {\n            iconClass = 'w-3 h-3 text-green-500';\n            textClass = 'text-green-700';\n        }\n        \n        eventDiv.innerHTML = `\n            <div class=\"flex-shrink-0\">\n                <i data-lucide=\"${type === 'agent' ? 'user' : type === 'error' ? 'alert-circle' : type === 'complete' ? 'check-circle' : 'clock'}\" class=\"${iconClass}\"></i>\n            </div>\n            <div class=\"flex-1 ${textClass}\">\n                <span>${event}</span>\n                ${agentId ? `<span class=\"text-gray-500\"> - ${agentId}</span>` : ''}\n            </div>\n            <div class=\"text-gray-400\">\n                ${timestamp.toLocaleTimeString()}\n            </div>\n        `;\n        \n        timeline.appendChild(eventDiv);\n        updateIcons();\n        \n        // Auto-scroll to bottom\n        timeline.scrollTop = timeline.scrollHeight;\n        \n        // Limit timeline to last 10 events\n        while (timeline.children.length > 10) {\n            timeline.removeChild(timeline.firstChild);\n        }\n    }\n\n    updateOverallProgress(progress, status = null) {\n        const progressText = document.getElementById('overall-progress-text');\n        const progressBar = document.getElementById('overall-progress-bar');\n        const taskStatus = document.getElementById('task-status');\n\n        if (progressText) {\n            progressText.textContent = `${progress}%`;\n        }\n        \n        if (progressBar) {\n            progressBar.style.width = `${progress}%`;\n        }\n\n        if (status && taskStatus) {\n            let statusClass = 'px-3 py-1 text-sm font-medium rounded-full';\n            switch (status) {\n                case 'running':\n                    statusClass += ' bg-blue-100 text-blue-700';\n                    taskStatus.textContent = 'In Progress';\n                    break;\n                case 'completed':\n                    statusClass += ' bg-green-100 text-green-700';\n                    taskStatus.textContent = 'Completed';\n                    break;\n                case 'error':\n                    statusClass += ' bg-red-100 text-red-700';\n                    taskStatus.textContent = 'Error';\n                    break;\n                default:\n                    statusClass += ' bg-gray-100 text-gray-700';\n                    taskStatus.textContent = 'Initializing';\n            }\n            taskStatus.className = statusClass;\n        }\n    }\n\n    // Enhanced progress update that handles advanced UI features\n    updateProgress(data) {\n        // Update basic progress bar (legacy)\n        const progressText = document.getElementById('collab-progress');\n        const progressBar = document.getElementById('collab-progress-bar');\n        \n        if (progressText && data.progress !== undefined) {\n            progressText.textContent = `${data.progress}%`;\n        }\n        if (progressBar && data.progress !== undefined) {\n            progressBar.style.width = `${data.progress}%`;\n        }\n\n        // Update advanced dashboard\n        this.updateOverallProgress(data.progress || 0, data.status);\n        \n        // Add timeline event for progress milestones\n        if (data.progress && data.progress % 25 === 0 && data.progress > 0) {\n            this.addTimelineEvent(`${data.progress}% complete`, 'system');\n        }\n        \n        // Update agent statuses if provided\n        if (data.agent_statuses) {\n            Object.entries(data.agent_statuses).forEach(([agentId, status]) => {\n                this.updateAgentStatus(agentId, status.status, status.progress, status.activity);\n            });\n        }\n    }\n\n    // Enhanced agent communication handler with timeline updates\n    handleAgentCommunication(data) {\n        const comm = data.communication || data;\n        this.displayAgentCommunication(comm);\n        \n        // Update agent status to working\n        this.updateAgentStatus(comm.from_agent, 'working', null, 'Processing request...');\n        \n        // Add timeline event\n        this.addTimelineEvent(`Agent ${comm.from_agent} started working`, 'agent', new Date(), comm.from_agent);\n        \n        showNotification(`${comm.from_agent} is working on the task`, 'info');\n    }\n}\n"
  ],
  "names": [],
  "mappings
}
{
  "version": 3,
  "file": "chat-interface.js",
  "sourceRoot": "",
  "sources": [
    "chat-interface.js"
  ],
  "sourcesContent": [
    "// Chat Interface Component\nimport { AgentAPI } from '../services/api.js';\nimport { StorageService } from '../services/storage.js';\nimport { DirectoryBrowser } from './directory-browser.js';\nimport { createElement, escapeHtml, showNotification, updateIcons } from '../utils/dom-helpers.js';\nimport { formatAgentResponse } from '../utils/formatters.js';\nimport { getAgentById, getAgentColor, AGENTS } from '../agents/agent-config.js';\nimport { startGroupChat } from './group-chat.js';\n\nexport class ChatInterface {\n    constructor(agentId) {\n        this.agentId = agentId;\n        this.agent = getAgentById(agentId);\n        this.api = new AgentAPI();\n        this.storage = new StorageService();\n        this.directoryBrowser = new DirectoryBrowser();\n        this.container = null;\n        this.chatArea = null;\n        this.input = null;\n        this.modelSelector = null;\n        this.isActive = false;\n        this.workingDirectory = this.storage.getAgentDirectory(agentId);\n    }\n\n    render() {\n        this.container = createElement('div', 'agent-chat-container');\n        this.container.id = `chat-container-${this.agentId}`;\n        \n        this.container.innerHTML = `\n            <div class=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n                <!-- Agent Header -->\n                <div class=\"p-6 border-b border-gray-100\">\n                    <div class=\"flex items-start justify-between\">\n                        <div class=\"flex-1\">\n                            <div class=\"flex items-center space-x-3\">\n                                <div class=\"status-indicator w-3 h-3 rounded-full bg-gray-400\"></div>\n                                <h2 class=\"text-xl font-semibold text-gray-900\">${this.agent.name}</h2>\n                                <span class=\"px-3 py-1 text-xs font-medium bg-${this.agent.color}-100 text-${this.agent.color}-700 rounded-full\">\n                                    ${this.agent.id.split('_')[0].toUpperCase()}\n                                </span>\n                            </div>\n                            <p class=\"text-sm text-gray-600 mt-1\">${this.agent.role}</p>\n                        </div>\n                        \n                        <div class=\"flex items-center space-x-2\">\n                            <!-- Action Buttons -->\n                            <button id=\"copy-${this.agentId}\" title=\"Copy chat contents\" class=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors\">\n                                <i data-lucide=\"copy\" class=\"w-4 h-4\"></i>\n                            </button>\n                            <button id=\"clear-${this.agentId}\" title=\"Clear chat history\" class=\"p-2 text-gray-500 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors\">\n                                <i data-lucide=\"trash-2\" class=\"w-4 h-4\"></i>\n                            </button>\n                            \n                            <!-- Model Selector -->\n                            <select id=\"model-${this.agentId}\" class=\"model-selector px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\">\n                                <option value=\"openai/gpt-4.1\" title=\"GPT 4.1: Latest all-around model\">GPT 4.1</option>\n                                <option value=\"openai/o3-pro\" title=\"O3 Pro: Advanced general reasoning\">O3 Pro</option>\n                                <option value=\"openai/codex-mini\" title=\"Codex Mini: Quick and efficient\">Codex Mini</option>\n                                <option value=\"anthropic/claude-4-opus\" title=\"Claude 4 Opus: Excellent reasoning\">Claude 4 Opus</option>\n                                <option value=\"anthropic/claude-4-sonnet\" title=\"Claude 4 Sonnet: Fast and capable\">Claude 4 Sonnet</option>\n                                <option value=\"deepseek/deepseek-v3\" title=\"DeepSeek V3: Versatile model\">DeepSeek V3</option>\n                                <option value=\"deepseek/deepseek-r1\" title=\"DeepSeek R1: General reasoning\">DeepSeek R1</option>\n                                <option value=\"google/gemini-2.5-pro\" title=\"Gemini 2.5 Pro: Google's best\">Gemini 2.5 Pro</option>\n                                <option value=\"x-ai/grok-3\" title=\"Grok 3: X.AI's flagship\">Grok 3</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Chat Area -->\n                <div class=\"chat-area overflow-y-auto p-6 bg-gray-50\" id=\"chat-${this.agentId}\">\n                    <div class=\"text-center text-gray-500 text-sm\">\n                        <i data-lucide=\"message-square\" class=\"w-12 h-12 text-gray-300 mx-auto mb-3\"></i>\n                        <p>No messages yet. Start a conversation with ${this.agent.name}!</p>\n                    </div>\n                </div>\n                \n                <!-- Input Area -->\n                <div class=\"p-6 border-t border-gray-100\">\n                    <div class=\"flex items-center space-x-2\">\n                        <!-- Directory selector button -->\n                        <button id=\"dir-${this.agentId}\" title=\"Select working directory\" class=\"p-3 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors\">\n                            <i data-lucide=\"folder\" class=\"w-5 h-5\"></i>\n                        </button>\n                        \n                        <!-- File upload button -->\n                        <input type=\"file\" id=\"upload-${this.agentId}\" class=\"hidden\">\n                        <button id=\"upload-btn-${this.agentId}\" title=\"Attach file\" class=\"p-3 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors\">\n                            <i data-lucide=\"paperclip\" class=\"w-5 h-5\"></i>\n                        </button>\n                        \n                        <!-- Message input -->\n                        <input type=\"text\" \n                               class=\"chat-input flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\" \n                               id=\"input-${this.agentId}\" \n                               placeholder=\"Type your message to ${this.agent.name}...\">\n                        \n                        <!-- Send button -->\n                        <button id=\"send-${this.agentId}\" class=\"p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n                            <i data-lucide=\"send\" class=\"w-5 h-5\"></i>\n                        </button>\n                    </div>\n                    \n                    <!-- Status indicators -->\n                    <div class=\"flex items-center justify-between mt-2 text-xs text-gray-500\">\n                        <span class=\"directory-label\" id=\"directory-label-${this.agentId}\">\n                            ${this.workingDirectory ? this.workingDirectory : 'No directory selected'}\n                        </span>\n                        <span class=\"file-label\" id=\"file-label-${this.agentId}\"></span>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Defer initialization until after DOM insertion\n        setTimeout(() => {\n            this.setupElements();\n            this.attachEventListeners();\n            this.loadChatHistory();\n            this.loadPreferences();\n        }, 0);\n        \n        return this.container;\n    }\n\n    setupElements() {\n        this.chatArea = document.getElementById(`chat-${this.agentId}`);\n        this.input = document.getElementById(`input-${this.agentId}`);\n        this.modelSelector = document.getElementById(`model-${this.agentId}`);\n    }\n\n    attachEventListeners() {\n        // Send message\n        this.input.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') this.sendMessage();\n        });\n        document.getElementById(`send-${this.agentId}`).addEventListener('click', () => this.sendMessage());\n        \n        // Directory browser\n        document.getElementById(`dir-${this.agentId}`).addEventListener('click', () => this.selectDirectory());\n        \n        // File upload\n        const uploadInput = document.getElementById(`upload-${this.agentId}`);\n        const uploadBtn = document.getElementById(`upload-btn-${this.agentId}`);\n        uploadBtn.addEventListener('click', () => uploadInput.click());\n        uploadInput.addEventListener('change', () => this.uploadFile());\n        \n        // Copy and clear\n        document.getElementById(`copy-${this.agentId}`).addEventListener('click', () => this.copyChat());\n        document.getElementById(`clear-${this.agentId}`).addEventListener('click', () => this.clearChat());\n        \n        // Model selector\n        this.modelSelector.addEventListener('change', () => {\n            this.storage.setModelPreference(this.agentId, this.modelSelector.value);\n        });\n    }\n\n    async sendMessage() {\n        let message = this.input.value.trim();\n        if (!message) return;\n        \n        // Check for @mentions - handle both @agentname and @agent name patterns\n        const mentionPattern = /@(\\w+(?:\\s+\\w+)?)/g;\n        const mentions = [...message.matchAll(mentionPattern)].map(match => {\n            // Remove spaces and convert to lowercase for matching\n            return match[1].replace(/\\s+/g, '').toLowerCase();\n        });\n        \n        if (mentions.length > 0) {\n            // Add the user's message to the chat first\n            this.addMessage(message, 'user');\n            \n            // Find mentioned agents\n            const mentionedAgents = [];\n            for (const mention of mentions) {\n                const agent = AGENTS.find(a => \n                    a.id.toLowerCase().includes(mention) || \n                    a.name.toLowerCase().includes(mention) ||\n                    a.id.toLowerCase().replace('_', '') === mention ||\n                    a.name.toLowerCase().replace(/\\s+/g, '') === mention\n                );\n                if (agent && agent.id !== this.agentId) {\n                    mentionedAgents.push(agent);\n                }\n            }\n            \n            if (mentionedAgents.length > 0) {\n                // Start group chat with mentioned agents\n                const currentAgent = getAgentById(this.agentId);\n                const groupChat = startGroupChat([currentAgent, ...mentionedAgents], message, this.workingDirectory);\n                \n                // The group chat will handle sending the initial message\n                // Just clear the input here\n                this.input.value = '';\n                \n                // Add notification in current chat\n                this.addMessage(\n                    `Started group chat with ${mentionedAgents.map(a => '@' + a.name).join(', ')}`, \n                    'assistant',\n                    '<span class=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800 ml-2\">Group Chat</span>'\n                );\n            } else {\n                showNotification('No valid agents mentioned', 'warning');\n            }\n            \n            this.input.value = '';\n            return;\n        }\n        \n        // Add directory context if selected\n        if (this.workingDirectory && !message.includes('[Working in:')) {\n            message = `[Working in: ${this.workingDirectory}]\\n${message}`;\n        }\n        \n        const model = this.modelSelector.value;\n        this.input.value = '';\n        \n        // Add user message\n        this.addMessage(message, 'user');\n        \n        // Update status\n        this.updateStatus(true);\n        \n        // Add typing indicator\n        const typingId = this.addTypingIndicator();\n        \n        try {\n            const enhancePrompt = this.storage.getEnhancePromptSetting();\n            const data = await this.api.sendMessage(this.agentId, message, model, enhancePrompt);\n            \n            // Remove typing indicator\n            this.removeTypingIndicator(typingId);\n            \n            if (data.success) {\n                const enhancedBadge = data.enhanced ? \n                    '<span class=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800 ml-2\">Enhanced</span>' : '';\n                this.addMessage(data.response, 'assistant', enhancedBadge);\n            } else {\n                this.addMessage(data.error, 'error');\n            }\n        } catch (err) {\n            this.removeTypingIndicator(typingId);\n            this.addMessage('Failed to send message', 'error');\n        } finally {\n            this.updateStatus(false);\n        }\n    }\n\n    addMessage(content, role, badge = '') {\n        const msgDiv = createElement('div', 'chat-message animate-slide-in');\n        \n        if (role === 'user') {\n            msgDiv.classList.add('flex', 'justify-end');\n            msgDiv.innerHTML = `\n                <div class=\"max-w-[80%] px-4 py-2 bg-blue-600 text-white rounded-lg rounded-br-none text-sm\">\n                    ${escapeHtml(content)}\n                </div>\n            `;\n        } else if (role === 'assistant') {\n            msgDiv.innerHTML = `\n                <div class=\"max-w-[80%]\">\n                    <div class=\"flex items-center space-x-2 mb-2\">\n                        <div class=\"font-medium text-xs text-gray-600\">${this.agent.name}</div>\n                        ${badge}\n                    </div>\n                    <div class=\"px-6 py-4 bg-gray-100 text-gray-800 rounded-lg rounded-bl-none shadow-sm\">\n                        <div class=\"agent-response text-sm leading-relaxed\">${formatAgentResponse(content)}</div>\n                    </div>\n                </div>\n            `;\n        } else if (role === 'error') {\n            msgDiv.innerHTML = `\n                <div class=\"max-w-[80%] px-4 py-2 bg-red-50 text-red-800 rounded-lg rounded-bl-none text-sm\">\n                    <div class=\"font-medium text-xs text-red-600 mb-1\">Error</div>\n                    ${escapeHtml(content)}\n                </div>\n            `;\n        }\n        \n        this.chatArea.appendChild(msgDiv);\n        this.chatArea.scrollTop = this.chatArea.scrollHeight;\n        updateIcons();\n    }\n\n    addTypingIndicator() {\n        const typingId = `typing-${this.agentId}-${Date.now()}`;\n        const typingDiv = createElement('div', 'chat-message animate-slide-in flex items-center space-x-2');\n        typingDiv.id = typingId;\n        typingDiv.innerHTML = `\n            <div class=\"flex space-x-1 px-4 py-2 bg-gray-100 rounded-lg\">\n                <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0ms\"></div>\n                <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 150ms\"></div>\n                <div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 300ms\"></div>\n            </div>\n        `;\n        this.chatArea.appendChild(typingDiv);\n        this.chatArea.scrollTop = this.chatArea.scrollHeight;\n        return typingId;\n    }\n\n    removeTypingIndicator(typingId) {\n        const typing = document.getElementById(typingId);\n        if (typing) typing.remove();\n    }\n\n    updateStatus(isActive) {\n        const indicator = this.container.querySelector('.status-indicator');\n        if (indicator) {\n            if (isActive) {\n                indicator.classList.remove('bg-gray-400');\n                indicator.classList.add('bg-green-500');\n            } else {\n                indicator.classList.remove('bg-green-500');\n                indicator.classList.add('bg-gray-400');\n            }\n        }\n    }\n\n    async selectDirectory() {\n        const selectedPath = await this.directoryBrowser.open(this.workingDirectory);\n        if (selectedPath) {\n            this.workingDirectory = selectedPath;\n            this.storage.setAgentDirectory(this.agentId, selectedPath);\n            document.getElementById(`directory-label-${this.agentId}`).textContent = selectedPath;\n            showNotification(`Directory selected for ${this.agent.name}: ${selectedPath}`, 'success');\n        }\n    }\n\n    async uploadFile() {\n        const fileInput = document.getElementById(`upload-${this.agentId}`);\n        const fileLabel = document.getElementById(`file-label-${this.agentId}`);\n        \n        if (fileInput.files.length === 0) {\n            showNotification('Please select a file to upload.', 'warning');\n            return;\n        }\n\n        const file = fileInput.files[0];\n        fileLabel.textContent = file.name;\n\n        this.addMessage(`Uploading: ${file.name}`, 'user');\n        this.updateStatus(true);\n\n        try {\n            const data = await this.api.uploadFile(this.agentId, file);\n            \n            if (data.success) {\n                this.addMessage(data.agent_response, 'assistant');\n            } else {\n                this.addMessage(data.error, 'error');\n            }\n        } catch (err) {\n            this.addMessage('Failed to upload file', 'error');\n        } finally {\n            this.updateStatus(false);\n            fileInput.value = '';\n            fileLabel.textContent = '';\n        }\n    }\n\n    async loadChatHistory() {\n        try {\n            const data = await this.api.getChatHistory(this.agentId);\n            \n            if (data.success && data.history && data.history.length > 0) {\n                this.chatArea.innerHTML = ''; // Clear empty state\n                \n                data.history.forEach(msg => {\n                    if (msg.role === 'user') {\n                        this.addMessage(msg.content, 'user');\n                    } else if (msg.role === 'assistant') {\n                        this.addMessage(msg.content, 'assistant');\n                    }\n                });\n            }\n        } catch (err) {\n            console.error(`Error loading chat history for ${this.agentId}:`, err);\n        }\n    }\n\n    loadPreferences() {\n        const savedModel = this.storage.getModelPreference(this.agentId);\n        if (savedModel) {\n            this.modelSelector.value = savedModel;\n        }\n    }\n\n    async clearChat() {\n        if (!confirm(`Are you sure you want to clear the chat history for ${this.agent.name}?`)) {\n            return;\n        }\n        \n        try {\n            const success = await this.api.clearChatHistory(this.agentId);\n            \n            if (success) {\n                this.chatArea.innerHTML = `\n                    <div class=\"text-center text-gray-500 text-sm\">\n                        <i data-lucide=\"message-square\" class=\"w-12 h-12 text-gray-300 mx-auto mb-3\"></i>\n                        <p>No messages yet. Start a conversation with ${this.agent.name}!</p>\n                    </div>\n                `;\n                updateIcons();\n                showNotification('Chat history cleared successfully', 'success');\n            } else {\n                showNotification('Failed to clear chat history', 'error');\n            }\n        } catch (error) {\n            console.error('Error clearing chat:', error);\n            showNotification('Failed to clear chat history', 'error');\n        }\n    }\n\n    copyChat() {\n        const messages = this.chatArea.querySelectorAll('.chat-message');\n        let chatText = `Chat History - ${this.agent.name}\\n${'='.repeat(40)}\\n\\n`;\n        \n        messages.forEach(msg => {\n            const isUser = msg.classList.contains('justify-end');\n            const role = isUser ? 'User' : this.agent.name;\n            const content = msg.querySelector('div > div').textContent.trim();\n            chatText += `${role}: ${content}\\n\\n`;\n        });\n        \n        navigator.clipboard.writeText(chatText).then(() => {\n            showNotification('Chat history copied to clipboard', 'success');\n        }).catch(err => {\n            console.error('Error copying to clipboard:', err);\n            showNotification('Failed to copy chat history', 'error');\n        });\n    }\n\n    show() {\n        this.container.classList.add('active');\n        this.isActive = true;\n        setTimeout(() => this.input.focus(), 100);\n    }\n\n    hide() {\n        this.container.classList.remove('active');\n        this.isActive = false;\n    }\n}"
  ],
  "names": [],
  "mappings
}
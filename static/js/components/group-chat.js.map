{
  "version": 3,
  "file": "group-chat.js",
  "sourceRoot": "",
  "sources": [
    "group-chat.js"
  ],
  "sourcesContent": [
    "// Group Chat Component for Multi-Agent Conversations\nimport { createElement, escapeHtml, showNotification } from '../utils/dom-helpers.js';\nimport { formatAgentResponse } from '../utils/formatters.js';\nimport { AgentAPI } from '../services/api.js';\n\nexport class GroupChat {\n    constructor(agents, initialMessage, workingDirectory) {\n        this.agents = agents; // Array of agent objects\n        this.messages = [];\n        this.workingDirectory = workingDirectory;\n        this.api = new AgentAPI();\n        this.chatId = `group_${Date.now()}`;\n        this.isMinimized = false;\n        this.container = null;\n        \n        // Create and show the group chat window\n        this.create(initialMessage);\n    }\n    \n    create(initialMessage) {\n        // Create the floating group chat window\n        this.container = createElement('div', 'group-chat-window');\n        this.container.style.zIndex = '9999'; // Ensure it's on top\n        this.container.innerHTML = `\n            <div class=\"group-chat-header\">\n                <div class=\"group-chat-title\">\n                    <i data-lucide=\"users\" class=\"w-4 h-4\"></i>\n                    <span>Group Chat: ${this.agents.map(a => a.name).join(', ')}</span>\n                </div>\n                <div class=\"group-chat-controls\">\n                    <button class=\"minimize-btn\" title=\"Minimize\">\n                        <i data-lucide=\"minus\" class=\"w-4 h-4\"></i>\n                    </button>\n                    <button class=\"close-btn\" title=\"Close\">\n                        <i data-lucide=\"x\" class=\"w-4 h-4\"></i>\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"group-chat-body\">\n                <div class=\"group-chat-messages\" id=\"group-messages-${this.chatId}\">\n                    <!-- Messages will appear here -->\n                </div>\n                \n                <div class=\"group-chat-input-area\">\n                    ${this.workingDirectory ? `\n                        <div class=\"working-directory-indicator\">\n                            <i data-lucide=\"folder\" class=\"w-3 h-3\"></i>\n                            <span>${this.workingDirectory}</span>\n                        </div>\n                    ` : ''}\n                    <div class=\"group-chat-input-wrapper\">\n                        <input type=\"text\" \n                               class=\"group-chat-input\" \n                               id=\"group-input-${this.chatId}\"\n                               placeholder=\"Type your message to all agents...\">\n                        <button class=\"group-chat-send\" id=\"group-send-${this.chatId}\">\n                            <i data-lucide=\"send\" class=\"w-4 h-4\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        // Add styles if not already present\n        this.addStyles();\n        \n        // Append to body\n        document.body.appendChild(this.container);\n        \n        // Setup event listeners\n        this.setupEventListeners();\n        \n        // Update icons\n        if (window.updateIcons) window.updateIcons();\n        \n        // Add initial message if provided\n        if (initialMessage) {\n            this.addMessage('user', 'You', initialMessage);\n            // Automatically send the initial message to start the collaboration\n            this.sendInitialMessage(initialMessage);\n        }\n        \n        // Focus the input\n        const input = document.getElementById(`group-input-${this.chatId}`);\n        if (input) input.focus();\n        \n        // Hide the main chat interface and show group chat prominently\n        this.takeFocus();\n        \n        // Announce group chat creation\n        showNotification(`Group chat started with ${this.agents.map(a => a.name).join(', ')}`, 'success');\n    }\n    \n    setupEventListeners() {\n        // Close button\n        this.container.querySelector('.close-btn').addEventListener('click', () => this.close());\n        \n        // Minimize button\n        this.container.querySelector('.minimize-btn').addEventListener('click', () => this.toggleMinimize());\n        \n        // Send button\n        const sendBtn = document.getElementById(`group-send-${this.chatId}`);\n        const input = document.getElementById(`group-input-${this.chatId}`);\n        \n        sendBtn.addEventListener('click', () => this.sendMessage());\n        input.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') this.sendMessage();\n        });\n        \n        // Make the window draggable\n        this.makeDraggable();\n    }\n    \n    makeDraggable() {\n        const header = this.container.querySelector('.group-chat-header');\n        let isDragging = false;\n        let currentX;\n        let currentY;\n        let initialX;\n        let initialY;\n        let xOffset = 0;\n        let yOffset = 0;\n        \n        header.addEventListener('mousedown', (e) => {\n            if (e.target.closest('.group-chat-controls')) return;\n            \n            initialX = e.clientX - xOffset;\n            initialY = e.clientY - yOffset;\n            isDragging = true;\n            header.style.cursor = 'grabbing';\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            if (!isDragging) return;\n            \n            e.preventDefault();\n            currentX = e.clientX - initialX;\n            currentY = e.clientY - initialY;\n            xOffset = currentX;\n            yOffset = currentY;\n            \n            this.container.style.transform = `translate(${currentX}px, ${currentY}px)`;\n        });\n        \n        document.addEventListener('mouseup', () => {\n            isDragging = false;\n            header.style.cursor = 'grab';\n        });\n    }\n    \n    async sendInitialMessage(message) {\n        // Create collaborative task for the initial message\n        try {\n            const taggedAgents = this.agents.map(agent => agent.id);\n            \n            const response = await this.api.startCollaboration(\n                message,\n                taggedAgents,\n                this.workingDirectory || '/Users/copp1723/Desktop/swarm/mcp_new_project',\n                false, // parallel execution\n                true   // enhance prompt\n            );\n            \n            if (response.success) {\n                this.taskId = response.task_id;\n                this.addMessage('system', 'System', `Processing your request...`);\n                this.startPollingForUpdates();\n            } else {\n                this.addMessage('error', 'System', 'Failed to start collaborative task');\n            }\n        } catch (error) {\n            console.error('Error sending initial message:', error);\n            this.addMessage('error', 'System', 'Error: ' + error.message);\n        }\n    }\n    \n    async sendMessage() {\n        const input = document.getElementById(`group-input-${this.chatId}`);\n        const message = input.value.trim();\n        if (!message) return;\n        \n        input.value = '';\n        \n        // Add user message\n        this.addMessage('user', 'You', message);\n        \n        // Create collaborative task\n        try {\n            const taggedAgents = this.agents.map(agent => agent.id);\n            \n            const response = await this.api.startCollaboration(\n                message,\n                taggedAgents,\n                this.workingDirectory || '/Users/copp1723/Desktop/swarm/mcp_new_project',\n                false, // parallel execution\n                true   // enhance prompt\n            );\n            \n            if (response.success) {\n                this.taskId = response.task_id;\n                this.addMessage('system', 'System', `Processing your request...`);\n                this.startPollingForUpdates();\n            } else {\n                this.addMessage('error', 'System', 'Failed to start collaborative task');\n            }\n        } catch (error) {\n            console.error('Error sending group message:', error);\n            this.addMessage('error', 'System', 'Error: ' + error.message);\n        }\n    }\n    \n    async startPollingForUpdates() {\n        if (!this.taskId) return;\n        \n        let pollCount = 0;\n        const maxPolls = 60; // Poll for up to 2 minutes\n        \n        const pollInterval = setInterval(async () => {\n            pollCount++;\n            \n            try {\n                const response = await this.api.getConversation(this.taskId);\n                console.log('Group chat poll response:', response);\n                \n                if (response.success) {\n                    // Process all communications\n                    const allCommunications = response.all_communications || [];\n                    \n                    allCommunications.forEach(comm => {\n                        if (!this.messages.find(m => m.id === comm.message_id)) {\n                            this.addMessage(\n                                'agent',\n                                comm.from_agent,\n                                comm.message,\n                                comm.message_id\n                            );\n                            \n                            if (comm.response) {\n                                this.addMessage(\n                                    'agent',\n                                    comm.to_agent,\n                                    comm.response,\n                                    comm.message_id + '_response'\n                                );\n                            }\n                        }\n                    });\n                    \n                    // Process conversations\n                    if (response.conversations && response.conversations.length > 0) {\n                        response.conversations.forEach(conv => {\n                            const msgId = `conv_${conv.agent_id}_${new Date(conv.timestamp).getTime()}`;\n                            if (!this.messages.find(m => m.id === msgId)) {\n                                this.addMessage(\n                                    'agent',\n                                    conv.agent_id,\n                                    conv.content,\n                                    msgId\n                                );\n                            }\n                        });\n                    }\n                    \n                    // Check if task is complete\n                    if (response.status === 'completed' || pollCount >= maxPolls) {\n                        clearInterval(pollInterval);\n                        if (response.status === 'completed') {\n                            this.addMessage('system', 'System', 'Collaboration completed successfully!');\n                        } else {\n                            this.addMessage('system', 'System', 'Task is taking longer than expected. You can continue typing to interact.');\n                        }\n                    }\n                } else {\n                    // Handle error responses\n                    if (response.error && response.error.includes('not found')) {\n                        // Task not found - stop polling\n                        clearInterval(pollInterval);\n                        this.addMessage('error', 'System', 'Task no longer exists. It may have been cleared after a server restart.');\n                        // Clear the task ID to prevent further polling\n                        this.taskId = null;\n                    }\n                }\n            } catch (error) {\n                console.error('Error polling for updates:', error);\n                if (pollCount >= 5) {\n                    clearInterval(pollInterval);\n                    this.addMessage('error', 'System', 'Unable to get updates. Please check your connection.');\n                }\n            }\n        }, 2000); // Poll every 2 seconds\n        \n        // Store interval ID for cleanup\n        this.pollInterval = pollInterval;\n    }\n    \n    addMessage(type, sender, content, messageId = null) {\n        const message = {\n            id: messageId || `msg_${Date.now()}_${Math.random()}`,\n            type,\n            sender,\n            content,\n            timestamp: new Date()\n        };\n        \n        this.messages.push(message);\n        \n        const messagesContainer = document.getElementById(`group-messages-${this.chatId}`);\n        if (!messagesContainer) return;\n        \n        const messageEl = createElement('div', `group-message ${type}-message`);\n        \n        if (type === 'user') {\n            messageEl.innerHTML = `\n                <div class=\"message-sender\">You</div>\n                <div class=\"message-content user-content\">${escapeHtml(content)}</div>\n            `;\n        } else if (type === 'agent') {\n            const agentInfo = this.agents.find(a => a.id === sender) || { name: sender, color: 'gray' };\n            messageEl.innerHTML = `\n                <div class=\"message-sender\" style=\"color: var(--color-${agentInfo.color}-600)\">${agentInfo.name}</div>\n                <div class=\"message-content agent-content\">${formatAgentResponse(content)}</div>\n            `;\n        } else if (type === 'system') {\n            messageEl.innerHTML = `\n                <div class=\"message-content system-content\">${content}</div>\n            `;\n        } else if (type === 'error') {\n            messageEl.innerHTML = `\n                <div class=\"message-content error-content\">${content}</div>\n            `;\n        }\n        \n        messagesContainer.appendChild(messageEl);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n    \n    toggleMinimize() {\n        this.isMinimized = !this.isMinimized;\n        this.container.classList.toggle('minimized', this.isMinimized);\n        \n        const icon = this.container.querySelector('.minimize-btn i');\n        icon.setAttribute('data-lucide', this.isMinimized ? 'maximize-2' : 'minus');\n        if (window.updateIcons) window.updateIcons();\n    }\n    \n    close() {\n        if (this.pollInterval) {\n            clearInterval(this.pollInterval);\n        }\n        \n        this.container.remove();\n        \n        // Show the main content again\n        const mainContent = document.querySelector('.main-content');\n        if (mainContent) {\n            mainContent.style.display = '';\n        }\n        \n        showNotification('Group chat closed', 'info');\n    }\n    \n    takeFocus() {\n        // Hide the main chat interface\n        const mainContent = document.querySelector('.main-content');\n        if (mainContent) {\n            mainContent.style.display = 'none';\n        }\n        \n        // Make the group chat window full-screen\n        this.container.style.position = 'fixed';\n        this.container.style.top = '50%';\n        this.container.style.left = '50%';\n        this.container.style.transform = 'translate(-50%, -50%)';\n        this.container.style.width = '90%';\n        this.container.style.maxWidth = '1200px';\n        this.container.style.height = '85vh';\n    }\n    \n    addStyles() {\n        if (document.getElementById('group-chat-styles')) return;\n        \n        const styles = document.createElement('style');\n        styles.id = 'group-chat-styles';\n        styles.textContent = `\n            .group-chat-window {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                width: 500px;\n                height: 600px;\n                background: white;\n                border-radius: 12px;\n                box-shadow: 0 20px 50px rgba(0, 0, 0, 0.25);\n                display: flex;\n                flex-direction: column;\n                z-index: 9999;\n                transition: all 0.3s ease;\n            }\n            \n            .group-chat-window.minimized {\n                height: 50px;\n            }\n            \n            .group-chat-window.minimized .group-chat-body {\n                display: none;\n            }\n            \n            .group-chat-header {\n                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                color: white;\n                padding: 15px;\n                border-radius: 12px 12px 0 0;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                cursor: grab;\n                user-select: none;\n            }\n            \n            .group-chat-title {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                font-weight: 600;\n            }\n            \n            .group-chat-controls {\n                display: flex;\n                gap: 8px;\n            }\n            \n            .group-chat-controls button {\n                background: rgba(255, 255, 255, 0.2);\n                border: none;\n                color: white;\n                width: 30px;\n                height: 30px;\n                border-radius: 6px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                cursor: pointer;\n                transition: all 0.2s;\n            }\n            \n            .group-chat-controls button:hover {\n                background: rgba(255, 255, 255, 0.3);\n            }\n            \n            .group-chat-body {\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n            }\n            \n            .group-chat-messages {\n                flex: 1;\n                overflow-y: auto;\n                padding: 20px;\n                background: #f9fafb;\n            }\n            \n            .group-message {\n                margin-bottom: 15px;\n                animation: slideIn 0.3s ease;\n            }\n            \n            @keyframes slideIn {\n                from {\n                    opacity: 0;\n                    transform: translateY(10px);\n                }\n                to {\n                    opacity: 1;\n                    transform: translateY(0);\n                }\n            }\n            \n            .message-sender {\n                font-size: 12px;\n                font-weight: 600;\n                margin-bottom: 4px;\n            }\n            \n            .message-content {\n                padding: 10px 15px;\n                border-radius: 8px;\n                font-size: 14px;\n                line-height: 1.5;\n                max-width: 85%;\n            }\n            \n            .user-content {\n                background: #3b82f6;\n                color: white;\n                margin-left: auto;\n                border-radius: 8px 8px 0 8px;\n            }\n            \n            .agent-content {\n                background: white;\n                border: 1px solid #e5e7eb;\n                margin-right: auto;\n            }\n            \n            .system-content {\n                background: #f3f4f6;\n                color: #6b7280;\n                text-align: center;\n                font-size: 12px;\n                margin: 10px auto;\n                max-width: 70%;\n            }\n            \n            .error-content {\n                background: #fee2e2;\n                color: #dc2626;\n                text-align: center;\n                margin: 10px auto;\n                max-width: 70%;\n            }\n            \n            .group-chat-input-area {\n                background: white;\n                border-top: 1px solid #e5e7eb;\n                padding: 15px;\n                border-radius: 0 0 12px 12px;\n            }\n            \n            .working-directory-indicator {\n                display: flex;\n                align-items: center;\n                gap: 5px;\n                font-size: 11px;\n                color: #6b7280;\n                margin-bottom: 10px;\n            }\n            \n            .group-chat-input-wrapper {\n                display: flex;\n                gap: 10px;\n            }\n            \n            .group-chat-input {\n                flex: 1;\n                padding: 10px 15px;\n                border: 1px solid #e5e7eb;\n                border-radius: 8px;\n                font-size: 14px;\n                transition: all 0.2s;\n            }\n            \n            .group-chat-input:focus {\n                outline: none;\n                border-color: #667eea;\n                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n            }\n            \n            .group-chat-send {\n                background: #667eea;\n                color: white;\n                border: none;\n                width: 40px;\n                height: 40px;\n                border-radius: 8px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                cursor: pointer;\n                transition: all 0.2s;\n            }\n            \n            .group-chat-send:hover {\n                background: #5a67d8;\n                transform: scale(1.05);\n            }\n        `;\n        \n        document.head.appendChild(styles);\n    }\n}\n\n// Export a function to start a group chat\nexport function startGroupChat(agents, initialMessage, workingDirectory) {\n    return new GroupChat(agents, initialMessage, workingDirectory);\n}"
  ],
  "names": [],
  "mappings
}
{
  "version": 3,
  "file": "workflow-visualization.js",
  "sourceRoot": "",
  "sources": [
    "workflow-visualization.js"
  ],
  "sourcesContent": [
    "// Advanced Workflow Visualization Component\nimport { createElement, updateIcons } from '../utils/dom-helpers.js';\nimport { getAgentById, getAgentColor } from '../agents/agent-config.js';\n\nexport class WorkflowVisualization {\n    constructor() {\n        this.container = null;\n        this.agents = [];\n        this.connections = [];\n        this.currentStep = 0;\n        this.totalSteps = 0;\n    }\n\n    init(containerId) {\n        this.container = document.getElementById(containerId);\n        if (!this.container) {\n            console.error('WorkflowVisualization: Container not found');\n            return false;\n        }\n        return true;\n    }\n\n    createWorkflowDiagram(agentIds, taskDescription) {\n        if (!this.container) return;\n\n        this.agents = agentIds.map(id => getAgentById(id)).filter(Boolean);\n        this.totalSteps = this.agents.length;\n        this.currentStep = 0;\n\n        this.container.innerHTML = `\n            <div class=\"workflow-visualization bg-white rounded-xl shadow-lg border border-gray-200 p-6\">\n                <div class=\"flex items-center justify-between mb-6\">\n                    <h3 class=\"text-lg font-semibold text-gray-900 flex items-center\">\n                        <i data-lucide=\"git-branch\" class=\"w-5 h-5 mr-2 text-blue-600\"></i>\n                        Workflow Visualization\n                    </h3>\n                    <div class=\"flex items-center space-x-2 text-sm text-gray-600\">\n                        <span>Step</span>\n                        <span id=\"current-step\" class=\"font-medium text-blue-600\">${this.currentStep}</span>\n                        <span>of</span>\n                        <span class=\"font-medium\">${this.totalSteps}</span>\n                    </div>\n                </div>\n\n                <!-- Task Description -->\n                <div class=\"mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                    <h4 class=\"text-sm font-medium text-gray-700 mb-2 flex items-center\">\n                        <i data-lucide=\"target\" class=\"w-4 h-4 mr-2\"></i>\n                        Task Description\n                    </h4>\n                    <p class=\"text-sm text-gray-600\">${taskDescription}</p>\n                </div>\n\n                <!-- Agent Flow Diagram -->\n                <div id=\"agent-flow\" class=\"relative\">\n                    ${this.createAgentFlow()}\n                </div>\n\n                <!-- Progress Timeline -->\n                <div class=\"mt-6 border-t border-gray-200 pt-4\">\n                    <h4 class=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\n                        <i data-lucide=\"clock\" class=\"w-4 h-4 mr-2\"></i>\n                        Execution Timeline\n                    </h4>\n                    <div id=\"workflow-timeline\" class=\"space-y-2 max-h-32 overflow-y-auto\">\n                        <!-- Timeline events will be added here -->\n                    </div>\n                </div>\n            </div>\n        `;\n\n        updateIcons();\n        this.addTimelineEvent('Workflow initialized', 'system');\n    }\n\n    createAgentFlow() {\n        if (this.agents.length === 0) return '';\n\n        const agentNodes = this.agents.map((agent, index) => {\n            const agentColor = getAgentColor(agent.color);\n            const isFirst = index === 0;\n            const isLast = index === this.agents.length - 1;\n            \n            return `\n                <div class=\"agent-node relative\" data-agent-id=\"${agent.id}\" data-step=\"${index + 1}\">\n                    <!-- Connection line (if not first) -->\n                    ${!isFirst ? `\n                        <div class=\"connection-line absolute -left-12 top-1/2 w-12 h-0.5 bg-gray-300 transform -translate-y-1/2\">\n                            <div class=\"connection-progress h-full bg-blue-500 transition-all duration-500\" style=\"width: 0%\"></div>\n                        </div>\n                    ` : ''}\n                    \n                    <!-- Agent Card -->\n                    <div class=\"agent-card bg-white border-2 border-gray-200 rounded-xl p-4 w-48 transition-all duration-300\">\n                        <div class=\"flex items-center space-x-3 mb-3\">\n                            <div class=\"agent-avatar w-10 h-10 ${agentColor} rounded-lg flex items-center justify-center relative\">\n                                <i data-lucide=\"${agent.icon}\" class=\"w-5 h-5 text-white\"></i>\n                                <div class=\"status-indicator absolute -top-1 -right-1 w-3 h-3 rounded-full bg-gray-300 border-2 border-white\"></div>\n                            </div>\n                            <div class=\"flex-1\">\n                                <div class=\"font-medium text-gray-900 text-sm\">${agent.name}</div>\n                                <div class=\"text-xs text-gray-500\">${agent.role}</div>\n                            </div>\n                        </div>\n                        \n                        <!-- Agent Progress -->\n                        <div class=\"space-y-2\">\n                            <div class=\"flex justify-between text-xs\">\n                                <span class=\"text-gray-600\">Progress</span>\n                                <span class=\"agent-progress font-medium\">0%</span>\n                            </div>\n                            <div class=\"w-full bg-gray-200 rounded-full h-2\">\n                                <div class=\"agent-progress-bar ${agentColor.replace('bg-', 'bg-')} h-2 rounded-full transition-all duration-300\" style=\"width: 0%\"></div>\n                            </div>\n                        </div>\n                        \n                        <!-- Current Activity -->\n                        <div class=\"mt-3 text-xs text-gray-600 agent-activity\">\n                            Waiting to start...\n                        </div>\n                    </div>\n                    \n                    <!-- Step Number -->\n                    <div class=\"step-number absolute -top-3 left-1/2 transform -translate-x-1/2 w-6 h-6 bg-gray-300 text-white rounded-full flex items-center justify-center text-xs font-medium\">\n                        ${index + 1}\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        return `\n            <div class=\"flex items-center justify-center space-x-12 overflow-x-auto pb-4\">\n                ${agentNodes}\n            </div>\n        `;\n    }\n\n    updateAgentStatus(agentId, status, progress = null, activity = null) {\n        const agentNode = this.container.querySelector(`[data-agent-id=\"${agentId}\"]`);\n        if (!agentNode) return;\n\n        const statusIndicator = agentNode.querySelector('.status-indicator');\n        const agentCard = agentNode.querySelector('.agent-card');\n        const progressText = agentNode.querySelector('.agent-progress');\n        const progressBar = agentNode.querySelector('.agent-progress-bar');\n        const activityText = agentNode.querySelector('.agent-activity');\n        const stepNumber = agentNode.querySelector('.step-number');\n\n        // Update status indicator\n        if (statusIndicator) {\n            statusIndicator.className = 'status-indicator absolute -top-1 -right-1 w-3 h-3 rounded-full border-2 border-white';\n            switch (status) {\n                case 'waiting':\n                    statusIndicator.classList.add('bg-gray-300');\n                    break;\n                case 'working':\n                    statusIndicator.classList.add('bg-yellow-400', 'animate-pulse');\n                    agentCard.classList.add('border-yellow-300', 'bg-yellow-50');\n                    agentCard.classList.remove('border-gray-200');\n                    break;\n                case 'completed':\n                    statusIndicator.classList.add('bg-green-400');\n                    agentCard.classList.add('border-green-300', 'bg-green-50');\n                    agentCard.classList.remove('border-gray-200', 'border-yellow-300', 'bg-yellow-50');\n                    stepNumber.classList.add('bg-green-500');\n                    stepNumber.classList.remove('bg-gray-300');\n                    break;\n                case 'error':\n                    statusIndicator.classList.add('bg-red-400');\n                    agentCard.classList.add('border-red-300', 'bg-red-50');\n                    agentCard.classList.remove('border-gray-200', 'border-yellow-300', 'bg-yellow-50');\n                    stepNumber.classList.add('bg-red-500');\n                    stepNumber.classList.remove('bg-gray-300');\n                    break;\n            }\n        }\n\n        // Update progress\n        if (progress !== null && progressText && progressBar) {\n            progressText.textContent = `${progress}%`;\n            progressBar.style.width = `${progress}%`;\n        }\n\n        // Update activity text\n        if (activity && activityText) {\n            activityText.textContent = activity;\n        }\n\n        // Update connection line to this agent\n        const stepIndex = parseInt(agentNode.dataset.step) - 1;\n        if (stepIndex > 0 && status === 'completed') {\n            const connectionProgress = agentNode.querySelector('.connection-progress');\n            if (connectionProgress) {\n                connectionProgress.style.width = '100%';\n            }\n        }\n    }\n\n    updateCurrentStep(step) {\n        this.currentStep = step;\n        const currentStepElement = this.container.querySelector('#current-step');\n        if (currentStepElement) {\n            currentStepElement.textContent = step;\n        }\n\n        // Highlight current step\n        this.container.querySelectorAll('.step-number').forEach((stepEl, index) => {\n            if (index < step) {\n                stepEl.classList.add('bg-blue-500');\n                stepEl.classList.remove('bg-gray-300');\n            } else if (index === step) {\n                stepEl.classList.add('bg-blue-500', 'animate-pulse');\n                stepEl.classList.remove('bg-gray-300');\n            }\n        });\n    }\n\n    addTimelineEvent(event, type = 'system', agentId = null) {\n        const timeline = this.container.querySelector('#workflow-timeline');\n        if (!timeline) return;\n\n        const timestamp = new Date();\n        const eventDiv = createElement('div', 'flex items-center space-x-2 text-xs timeline-event opacity-0 animate-fadeIn');\n        \n        let iconClass = 'w-3 h-3 text-gray-500';\n        let textClass = 'text-gray-600';\n        \n        switch (type) {\n            case 'agent':\n                iconClass = 'w-3 h-3 text-blue-500';\n                textClass = 'text-blue-700';\n                break;\n            case 'error':\n                iconClass = 'w-3 h-3 text-red-500';\n                textClass = 'text-red-700';\n                break;\n            case 'complete':\n                iconClass = 'w-3 h-3 text-green-500';\n                textClass = 'text-green-700';\n                break;\n        }\n        \n        eventDiv.innerHTML = `\n            <div class=\"flex-shrink-0\">\n                <i data-lucide=\"${type === 'agent' ? 'user' : type === 'error' ? 'alert-circle' : type === 'complete' ? 'check-circle' : 'clock'}\" class=\"${iconClass}\"></i>\n            </div>\n            <div class=\"flex-1 ${textClass}\">\n                <span>${event}</span>\n                ${agentId ? `<span class=\"text-gray-500\"> - ${agentId}</span>` : ''}\n            </div>\n            <div class=\"text-gray-400\">\n                ${timestamp.toLocaleTimeString()}\n            </div>\n        `;\n        \n        timeline.appendChild(eventDiv);\n        updateIcons();\n        \n        // Auto-scroll to bottom\n        timeline.scrollTop = timeline.scrollHeight;\n        \n        // Limit timeline to last 10 events\n        while (timeline.children.length > 10) {\n            timeline.removeChild(timeline.firstChild);\n        }\n\n        // Trigger animation\n        setTimeout(() => {\n            eventDiv.classList.remove('opacity-0');\n            eventDiv.classList.add('opacity-100');\n        }, 10);\n    }\n\n    reset() {\n        this.currentStep = 0;\n        this.agents = [];\n        this.connections = [];\n        if (this.container) {\n            this.container.innerHTML = '';\n        }\n    }\n\n    // Simulate workflow progression for demo purposes\n    simulateProgress() {\n        if (!this.agents.length) return;\n\n        this.agents.forEach((agent, index) => {\n            setTimeout(() => {\n                this.updateAgentStatus(agent.id, 'working', 0, 'Processing...');\n                this.updateCurrentStep(index + 1);\n                this.addTimelineEvent(`${agent.name} started working`, 'agent', agent.id);\n\n                // Simulate progress\n                let progress = 0;\n                const progressInterval = setInterval(() => {\n                    progress += Math.random() * 20;\n                    if (progress >= 100) {\n                        progress = 100;\n                        this.updateAgentStatus(agent.id, 'completed', progress, 'Completed successfully');\n                        this.addTimelineEvent(`${agent.name} completed task`, 'complete', agent.id);\n                        clearInterval(progressInterval);\n                    } else {\n                        this.updateAgentStatus(agent.id, 'working', Math.round(progress), 'Processing...');\n                    }\n                }, 500);\n            }, index * 2000);\n        });\n    }\n}\n\n// CSS for animations (to be added to main CSS file)\nexport const workflowVisualizationCSS = `\n.workflow-visualization .timeline-event {\n    transition: opacity 0.3s ease-in-out;\n}\n\n.workflow-visualization .animate-fadeIn {\n    animation: fadeInTimeline 0.3s ease-in-out forwards;\n}\n\n@keyframes fadeInTimeline {\n    from {\n        opacity: 0;\n        transform: translateY(-5px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.workflow-visualization .agent-card {\n    transition: all 0.3s ease-in-out;\n}\n\n.workflow-visualization .connection-progress {\n    transition: width 0.5s ease-in-out;\n}\n\n.workflow-visualization .step-number {\n    transition: all 0.3s ease-in-out;\n}\n`;\n\n"
  ],
  "names": [],
  "mappings
}
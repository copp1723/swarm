{
  "version": 3,
  "file": "formatters.js",
  "sourceRoot": "",
  "sources": [
    "formatters.js"
  ],
  "sourcesContent": [
    "// Formatting utilities\nimport { escapeHtml } from './dom-helpers.js';\n\nexport function formatAgentResponse(text) {\n    // First escape HTML\n    let formatted = escapeHtml(text);\n    \n    // Convert headers - reduced spacing\n    formatted = formatted.replace(/^###\\s+(.+)$/gm, '<h3 class=\"font-bold text-base text-gray-900 mt-3 mb-2 border-b border-blue-200 pb-1\">$1</h3>');\n    formatted = formatted.replace(/^##\\s+(.+)$/gm, '<h4 class=\"font-semibold text-sm text-gray-800 mt-2 mb-1\">$1</h4>');\n    formatted = formatted.replace(/^#\\s+(.+)$/gm, '<h3 class=\"font-bold text-lg text-gray-900 mt-3 mb-2\">$1</h3>');\n    \n    // Convert numbered lists with tighter spacing\n    formatted = formatted.replace(/^(\\d+)\\.\\s+(.+)$/gm, '<li class=\"ml-4 mb-1\"><span class=\"font-semibold text-blue-600\">$1.</span> $2</li>');\n    \n    // Convert bullet points with tighter spacing\n    formatted = formatted.replace(/^[-*\u2022]\\s+(.+)$/gm, '<li class=\"ml-4 mb-0.5\">\u2022 $1</li>');\n    \n    // Wrap consecutive list items in <ul> tags with reduced padding\n    formatted = formatted.replace(/(<li class=\"ml-4[^\"]*\">.+<\\/li>\\n?)+/g, function(match) {\n        return '<ul class=\"list-none space-y-0.5 my-2 pl-2\">' + match + '</ul>';\n    });\n    \n    // Convert headers with tighter spacing\n    formatted = formatted.replace(/^([A-Za-z0-9\\s]+):\\s*$/gm, '<h4 class=\"font-bold text-gray-900 mt-2 mb-1 text-sm\">$1:</h4>');\n    \n    // Convert inline headers with reduced margin\n    formatted = formatted.replace(/^([A-Za-z0-9\\s]+):\\s+(.+)$/gm, '<div class=\"mb-1 pl-2 border-l-2 border-gray-300\"><span class=\"font-semibold text-gray-800 text-sm\">$1:</span> <span class=\"text-gray-700 text-sm\">$2</span></div>');\n    \n    // Convert code blocks with reduced padding\n    formatted = formatted.replace(/```(\\w+)?\\n?([^`]+)```/g, function(match, lang, code) {\n        const language = lang || 'plaintext';\n        return `<div class=\"my-2\">\n            <div class=\"bg-gray-700 text-gray-300 px-2 py-0.5 text-xs rounded-t\">${language}</div>\n            <pre class=\"bg-gray-800 text-gray-100 p-2 rounded-b text-xs overflow-x-auto\"><code>${code.trim()}</code></pre>\n        </div>`;\n    });\n    \n    // Convert inline code\n    formatted = formatted.replace(/`([^`]+)`/g, '<code class=\"bg-gray-200 px-1 py-0.5 rounded text-xs font-mono text-gray-800\">$1</code>');\n    \n    // Convert bold text\n    formatted = formatted.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong class=\"font-semibold text-gray-900\">$1</strong>');\n    \n    // Convert italic text\n    formatted = formatted.replace(/\\*([^*]+)\\*/g, '<em class=\"italic text-gray-700\">$1</em>');\n    \n    // Convert line breaks to paragraphs with reduced spacing\n    const paragraphs = formatted.split('\\n\\n');\n    formatted = paragraphs\n        .filter(p => p.trim())\n        .map(p => {\n            // Don't wrap if it's already wrapped in a tag\n            if (p.trim().startsWith('<')) return p;\n            return `<p class=\"mb-2 text-sm text-gray-700 leading-normal\">${p}</p>`;\n        })\n        .join('\\n');\n    \n    // Convert remaining single line breaks to <br> within paragraphs\n    formatted = formatted.replace(/\\n/g, '<br>');\n    \n    return formatted;\n}"
  ],
  "names": [],
  "mappings": "AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA"
}
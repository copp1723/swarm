{
  "version": 3,
  "file": "websocket.js",
  "sourceRoot": "",
  "sources": [
    "websocket.js"
  ],
  "sourcesContent": [
    "\n// WebSocket service for real-time communication\nexport class WebSocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        this.reconnectDelay = 1000;\n    }\n\n    connect() {\n        if (typeof io === 'undefined') {\n            console.error('Socket.IO not loaded');\n            setTimeout(() => this.connect(), 1000);\n            return;\n        }\n\n        const url = window.location.hostname === 'localhost' \n            ? 'http://localhost:5006' \n            : window.location.origin;\n\n        this.socket = io(url, {\n            transports: ['websocket', 'polling'],\n            reconnection: true,\n            reconnectionAttempts: this.maxReconnectAttempts,\n            reconnectionDelay: this.reconnectDelay\n        });\n\n        this.socket.on('connect', () => {\n            console.log('WebSocket connected');\n            this.reconnectAttempts = 0;\n            this.emit('connected');\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('WebSocket disconnected:', reason);\n            this.emit('disconnected');\n            \n            if (reason === 'io server disconnect') {\n                // Server disconnected us, try to reconnect\n                setTimeout(() => this.connect(), this.reconnectDelay);\n            }\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('WebSocket connection error:', error.message);\n            this.reconnectAttempts++;\n            \n            if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n                console.error('Max reconnection attempts reached');\n                this.emit('connection_failed');\n            }\n        });\n\n        // Handle agent communication updates\n        this.socket.on('agent_communication', (data) => {\n            console.log('Agent communication event:', data);\n            this.emit('agent_communication', data);\n        });\n\n        // Handle task progress updates\n        this.socket.on('task_progress', (data) => {\n            console.log('Task progress update:', data);\n            this.emit('task_progress', data);\n        });\n\n        // Handle system notifications\n        this.socket.on('system_notification', (data) => {\n            console.log('System notification:', data);\n            this.emit('system_notification', data);\n        });\n    }\n\n    disconnect() {\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n        }\n    }\n\n    joinTask(taskId) {\n        if (this.socket && this.socket.connected) {\n            this.socket.emit('join_task', { task_id: taskId });\n        } else {\n            console.warn('Cannot join task - WebSocket not connected');\n        }\n    }\n\n    on(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(callback);\n    }\n\n    off(event, callback) {\n        if (this.listeners.has(event)) {\n            const callbacks = this.listeners.get(event);\n            const index = callbacks.indexOf(callback);\n            if (index > -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n    }\n\n    emit(event, data) {\n        if (this.listeners.has(event)) {\n            this.listeners.get(event).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (err) {\n                    console.error(`Error in WebSocket listener for ${event}:`, err);\n                }\n            });\n        }\n    }\n}\n"
  ],
  "names": [],
  "mappings
}
{
  "version": 3,
  "file": "api.js",
  "sourceRoot": "",
  "sources": [
    "api.js"
  ],
  "sourcesContent": [
    "// API service module\nimport { getAuthHeaders } from '../config.js';\n\nexport class AgentAPI {\n    constructor() {\n        this.baseUrl = '/api/agents';\n    }\n\n    async sendMessage(agentId, message, model, enhancePrompt) {\n        const response = await fetch(`${this.baseUrl}/chat/${agentId}`, {\n            method: 'POST',\n            headers: getAuthHeaders(),\n            body: JSON.stringify({ \n                message, \n                model, \n                enhance_prompt: enhancePrompt \n            })\n        });\n        return response.json();\n    }\n\n    async uploadFile(agentId, file) {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        const headers = {};\n        const authHeaders = getAuthHeaders();\n        // Don't set Content-Type for FormData - browser will set it with boundary\n        if (authHeaders['X-API-Key']) {\n            headers['X-API-Key'] = authHeaders['X-API-Key'];\n        }\n\n        const response = await fetch(`${this.baseUrl}/upload/${agentId}`, {\n            method: 'POST',\n            headers: headers,\n            body: formData\n        });\n        return response.json();\n    }\n\n    async getChatHistory(agentId) {\n        const response = await fetch(`${this.baseUrl}/chat_history/${agentId}`, {\n            headers: getAuthHeaders()\n        });\n        return response.json();\n    }\n\n    async clearChatHistory(agentId) {\n        const response = await fetch(`${this.baseUrl}/chat_history/${agentId}`, {\n            method: 'DELETE',\n            headers: getAuthHeaders()\n        });\n        return response.ok;\n    }\n\n    async startCollaboration(taskDescription, taggedAgents, workingDirectory, sequential = false, enhancePrompt = true) {\n        const response = await fetch(`${this.baseUrl}/collaborate`, {\n            method: 'POST',\n            headers: getAuthHeaders(),\n            body: JSON.stringify({\n                task_description: taskDescription,\n                tagged_agents: taggedAgents,\n                working_directory: workingDirectory,\n                sequential,\n                enhance_prompt: enhancePrompt\n            })\n        });\n        return response.json();\n    }\n\n    async getConversation(taskId) {\n        const response = await fetch(`${this.baseUrl}/conversation/${taskId}`);\n        if (!response.ok) {\n            if (response.status === 404) {\n                throw new Error('404: Task not found');\n            }\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n    }\n\n    async getWorkflowTemplates() {\n        const response = await fetch(`${this.baseUrl}/workflows`);\n        return response.json();\n    }\n}\n\nexport class FileAPI {\n    async browseDirectory(path) {\n        const response = await fetch(`/api/files/browse?path=${encodeURIComponent(path)}`);\n        return response.json();\n    }\n}"
  ],
  "names": [],
  "mappings": "AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}
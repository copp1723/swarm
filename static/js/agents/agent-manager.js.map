{
  "version": 3,
  "file": "agent-manager.js",
  "sourceRoot": "",
  "sources": [
    "agent-manager.js"
  ],
  "sourcesContent": [
    "// Agent Manager - handles all agent instances and coordination\nimport { AGENTS, getAgentColor } from './agent-config.js';\nimport { ChatInterface } from '../components/chat-interface.js';\nimport { createElement, updateIcons } from '../utils/dom-helpers.js';\nimport { getAuthHeaders } from '../config.js';\n\nexport class AgentManager {\n    constructor() {\n        this.agents = [];\n        this.chatInterfaces = new Map();\n        this.currentAgentId = null;\n        this.sidebar = null;\n        this.container = null;\n    }\n\n    async init() {\n        await this.loadAgents();\n        this.initializeSidebar();\n        this.initializeAgentContainers();\n        this.setupEventListeners();\n        updateIcons();\n    }\n\n    async loadAgents() {\n        try {\n            const response = await fetch('/api/agents/list', {\n                headers: getAuthHeaders()\n            });\n            const data = await response.json();\n            \n            if (data.success) {\n                // Transform API response to match UI format, map names to actual IDs\n                this.agents = data.profiles.map(profile => {\n                    let id;\n                    if (profile.name === 'Product Agent') id = 'product_01';\n                    else if (profile.name === 'Coding Agent') id = 'coding_01';\n                    else if (profile.name === 'Bug Agent') id = 'bug_01';\n                    else if (profile.name === 'General Assistant') id = 'general_01';\n                    else id = profile.name.toLowerCase().replace(/\\s+/g, '_') + '_01';\n                    \n                    return {\n                        id: id,\n                        name: profile.name,\n                        role: profile.description,\n                        icon: this.getIconForRole(profile.role),\n                        color: this.getColorForRole(profile.role)\n                    };\n                });\n            } else {\n                console.error('Failed to load agents:', data);\n                // Fallback to hardcoded agents\n                this.agents = AGENTS;\n            }\n        } catch (error) {\n            console.error('Error loading agents:', error);\n            // Fallback to hardcoded agents\n            this.agents = AGENTS;\n        }\n    }\n\n    getIconForRole(role) {\n        if (role === 'product') return 'package';\n        if (role === 'developer') return 'code';\n        if (role === 'qa') return 'bug';\n        return 'message-circle';\n    }\n\n    getColorForRole(role) {\n        if (role === 'product') return 'purple';\n        if (role === 'developer') return 'green';\n        if (role === 'qa') return 'red';\n        return 'gray';\n    }\n\n    initializeSidebar() {\n        const navList = document.getElementById('agent-nav-list');\n        navList.innerHTML = '';\n        \n        this.agents.forEach(agent => {\n            const navItem = createElement('div', 'agent-nav-item');\n            navItem.id = `nav-${agent.id}`;\n            \n            const colorClass = getAgentColor(agent.color);\n            navItem.innerHTML = `\n                <div class=\"flex items-center flex-1\">\n                    <div class=\"w-10 h-10 ${colorClass} rounded-lg flex items-center justify-center mr-3\">\n                        <i data-lucide=\"${agent.icon}\" class=\"w-5 h-5 text-white\"></i>\n                    </div>\n                    <div>\n                        <div class=\"font-medium\">${agent.name}</div>\n                        <div class=\"text-xs text-gray-400\">${agent.role.substring(0, 30)}...</div>\n                    </div>\n                </div>\n                <div class=\"status-indicator w-2 h-2 rounded-full bg-gray-500\"></div>\n            `;\n            \n            navItem.addEventListener('click', () => this.selectAgent(agent.id));\n            navList.appendChild(navItem);\n        });\n    }\n\n    initializeAgentContainers() {\n        this.container = document.getElementById('agent-chats-container');\n        \n        // Create chat interfaces for all agents\n        this.agents.forEach(agent => {\n            const chatInterface = new ChatInterface(agent.id);\n            const chatContainer = chatInterface.render();\n            this.container.appendChild(chatContainer);\n            this.chatInterfaces.set(agent.id, chatInterface);\n        });\n    }\n\n    setupEventListeners() {\n        // Mobile menu toggle\n        const mobileMenuBtn = document.getElementById('mobile-menu-btn');\n        if (mobileMenuBtn) {\n            mobileMenuBtn.addEventListener('click', () => this.toggleMobileSidebar());\n        }\n        \n        // Sidebar collapse\n        const collapseBtn = document.getElementById('collapse-sidebar');\n        if (collapseBtn) {\n            collapseBtn.addEventListener('click', () => this.toggleSidebar());\n        }\n        \n        // Listen for agent mentions (three-way chat)\n        document.addEventListener('agent-mention', (event) => {\n            this.handleAgentMention(event.detail);\n        });\n    }\n\n    selectAgent(agentId) {\n        // Hide welcome message\n        const welcomeMsg = document.getElementById('welcome-message');\n        if (welcomeMsg) welcomeMsg.style.display = 'none';\n        \n        // Update sidebar active state\n        document.querySelectorAll('.agent-nav-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        document.getElementById(`nav-${agentId}`).classList.add('active');\n        \n        // Hide all chat interfaces\n        this.chatInterfaces.forEach((chatInterface, id) => {\n            if (id === agentId) {\n                chatInterface.show();\n            } else {\n                chatInterface.hide();\n            }\n        });\n        \n        // Update header\n        const agent = this.agents.find(a => a.id === agentId);\n        const currentAgentName = document.getElementById('current-agent-name');\n        const currentAgentStatus = document.getElementById('current-agent-status');\n        \n        if (currentAgentName) currentAgentName.textContent = agent.name;\n        if (currentAgentStatus) {\n            currentAgentStatus.textContent = agent.id.split('_')[0].toUpperCase();\n            currentAgentStatus.className = `px-3 py-1 text-xs font-medium rounded-full bg-${agent.color}-100 text-${agent.color}-700`;\n        }\n        \n        this.currentAgentId = agentId;\n        \n        // Close mobile sidebar\n        if (window.innerWidth < 768) {\n            const sidebar = document.getElementById('sidebar');\n            if (sidebar) sidebar.classList.remove('open');\n        }\n    }\n\n    toggleSidebar() {\n        const sidebar = document.getElementById('sidebar');\n        const mainContent = document.querySelector('.main-content');\n        \n        if (!sidebar || !mainContent) return;\n        \n        sidebar.classList.toggle('collapsed');\n        mainContent.classList.toggle('full-width');\n        \n        // Update collapse button\n        const collapseBtn = document.getElementById('collapse-sidebar');\n        if (collapseBtn) {\n            const icon = collapseBtn.querySelector('i');\n            const text = collapseBtn.querySelector('span');\n            \n            if (sidebar.classList.contains('collapsed')) {\n                icon.setAttribute('data-lucide', 'chevron-right');\n                text.textContent = 'Expand';\n            } else {\n                icon.setAttribute('data-lucide', 'chevron-left');\n                text.textContent = 'Collapse';\n            }\n            \n            updateIcons();\n        }\n    }\n\n    toggleMobileSidebar() {\n        const sidebar = document.getElementById('sidebar');\n        if (sidebar) {\n            sidebar.classList.toggle('open');\n        }\n    }\n\n    handleAgentMention(detail) {\n        // This will be handled by the collaboration modal\n        const event = new CustomEvent('start-three-way-chat', { detail });\n        document.dispatchEvent(event);\n    }\n\n    updateAgentStatus(agentId, isActive) {\n        const navItem = document.getElementById(`nav-${agentId}`);\n        if (navItem) {\n            const indicator = navItem.querySelector('.status-indicator');\n            if (indicator) {\n                if (isActive) {\n                    indicator.classList.remove('bg-gray-500');\n                    indicator.classList.add('bg-green-500');\n                } else {\n                    indicator.classList.remove('bg-green-500');\n                    indicator.classList.add('bg-gray-500');\n                }\n            }\n        }\n        \n        // Also update the chat interface status\n        const chatInterface = this.chatInterfaces.get(agentId);\n        if (chatInterface) {\n            chatInterface.updateStatus(isActive);\n        }\n    }\n\n    getAgent(agentId) {\n        return this.agents.find(a => a.id === agentId);\n    }\n\n    getChatInterface(agentId) {\n        return this.chatInterfaces.get(agentId);\n    }\n\n    getAllAgents() {\n        return this.agents;\n    }\n}"
  ],
  "names": [],
  "mappings
}
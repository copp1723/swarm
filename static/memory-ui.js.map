{
  "version": 3,
  "file": "memory-ui.js",
  "sourceRoot": "",
  "sources": [
    "memory-ui.js"
  ],
  "sourcesContent": [
    "/**\n * Memory UI Component for Agent Interface\n * Provides visual feedback for memory operations\n */\n\nclass MemoryUI {\n    constructor() {\n        this.memoryEnabled = true;\n        this.memoryIndicators = new Map();\n    }\n\n    /**\n     * Add memory indicator to agent chat\n     */\n    addMemoryIndicator(agentId) {\n        const chatHeader = document.querySelector(`#chat-container-${agentId} .chat-header`);\n        if (!chatHeader || this.memoryIndicators.has(agentId)) return;\n\n        const indicator = document.createElement('div');\n        indicator.className = 'memory-indicator';\n        indicator.id = `memory-indicator-${agentId}`;\n        indicator.innerHTML = `\n            <div class=\"flex items-center space-x-2 text-xs\">\n                <i data-lucide=\"brain\" class=\"w-4 h-4 text-purple-500\"></i>\n                <span class=\"text-gray-600\">Memory: <span class=\"memory-status\">Active</span></span>\n                <button onclick=\"memoryUI.showAgentMemories('${agentId}')\" \n                        class=\"ml-2 text-purple-600 hover:text-purple-700 underline\">\n                    View Memories\n                </button>\n            </div>\n        `;\n\n        chatHeader.appendChild(indicator);\n        this.memoryIndicators.set(agentId, indicator);\n        lucide.createIcons();\n    }\n\n    /**\n     * Search memories\n     */\n    async searchMemories(query, agentId = null) {\n        try {\n            const response = await fetch('/api/memory/search', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ query, agent_id: agentId, limit: 10 })\n            });\n\n            const data = await response.json();\n            if (data.success) {\n                return data.memories;\n            }\n            return [];\n        } catch (error) {\n            console.error('Error searching memories:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Add a memory\n     */\n    async addMemory(content, agentId, metadata = {}) {\n        try {\n            const response = await fetch('/api/memory/add', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    content,\n                    agent_id: agentId,\n                    metadata: {\n                        ...metadata,\n                        added_via: 'ui',\n                        timestamp: new Date().toISOString()\n                    }\n                })\n            });\n\n            const data = await response.json();\n            if (data.success) {\n                this.showMemoryNotification('Memory added successfully', 'success');\n                return data;\n            }\n            throw new Error(data.error || 'Failed to add memory');\n        } catch (error) {\n            console.error('Error adding memory:', error);\n            this.showMemoryNotification('Failed to add memory', 'error');\n            return null;\n        }\n    }\n\n    /**\n     * Show agent memories in a modal\n     */\n    async showAgentMemories(agentId) {\n        const modal = document.createElement('div');\n        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n        modal.innerHTML = `\n            <div class=\"bg-white rounded-lg p-6 max-w-4xl w-full max-h-[80vh] overflow-hidden\">\n                <div class=\"flex items-center justify-between mb-4\">\n                    <h3 class=\"text-xl font-semibold flex items-center space-x-2\">\n                        <i data-lucide=\"brain\" class=\"w-6 h-6 text-purple-500\"></i>\n                        <span>${getAgentName(agentId)} Memories</span>\n                    </h3>\n                    <button onclick=\"this.closest('.fixed').remove()\" class=\"text-gray-500 hover:text-gray-700\">\n                        <i data-lucide=\"x\" class=\"w-6 h-6\"></i>\n                    </button>\n                </div>\n                \n                <!-- Search bar -->\n                <div class=\"mb-4\">\n                    <input type=\"text\" \n                           id=\"memory-search-${agentId}\" \n                           placeholder=\"Search memories...\"\n                           class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\n                           onkeyup=\"memoryUI.searchAgentMemories('${agentId}', event)\">\n                </div>\n                \n                <!-- Memory list -->\n                <div id=\"memory-list-${agentId}\" class=\"overflow-y-auto max-h-[60vh] space-y-3\">\n                    <div class=\"text-center text-gray-500\">\n                        <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto\"></div>\n                        <p class=\"mt-2\">Loading memories...</p>\n                    </div>\n                </div>\n                \n                <!-- Add memory button -->\n                <div class=\"mt-4 pt-4 border-t\">\n                    <button onclick=\"memoryUI.showAddMemoryForm('${agentId}')\" \n                            class=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\">\n                        <i data-lucide=\"plus\" class=\"w-4 h-4 inline mr-2\"></i>\n                        Add Memory\n                    </button>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        lucide.createIcons();\n\n        // Load memories\n        await this.loadAgentMemories(agentId);\n    }\n\n    /**\n     * Load and display agent memories\n     */\n    async loadAgentMemories(agentId) {\n        try {\n            const response = await fetch(`/api/memory/agent/${agentId}?limit=50`);\n            const data = await response.json();\n\n            const listContainer = document.getElementById(`memory-list-${agentId}`);\n            if (!listContainer) return;\n\n            if (data.success && data.memories && data.memories.length > 0) {\n                listContainer.innerHTML = data.memories.map(memory => `\n                    <div class=\"bg-gray-50 rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow\">\n                        <div class=\"text-sm text-gray-800 mb-2\">${this.escapeHtml(memory.content)}</div>\n                        <div class=\"flex items-center justify-between text-xs text-gray-500\">\n                            <span>${new Date(memory.metadata?.timestamp || memory.timestamp).toLocaleString()}</span>\n                            ${memory.score ? `<span class=\"text-purple-600\">Score: ${memory.score.toFixed(2)}</span>` : ''}\n                        </div>\n                        ${memory.metadata ? `\n                        <div class=\"mt-2 text-xs text-gray-600\">\n                            ${Object.entries(memory.metadata)\n                                .filter(([key]) => !['timestamp', 'agent_id'].includes(key))\n                                .map(([key, value]) => `<span class=\"mr-2\">${key}: ${value}</span>`)\n                                .join('')}\n                        </div>\n                        ` : ''}\n                    </div>\n                `).join('');\n            } else {\n                listContainer.innerHTML = `\n                    <div class=\"text-center text-gray-500 py-8\">\n                        <i data-lucide=\"inbox\" class=\"w-12 h-12 mx-auto mb-3 text-gray-300\"></i>\n                        <p>No memories found for this agent</p>\n                    </div>\n                `;\n            }\n\n            lucide.createIcons();\n        } catch (error) {\n            console.error('Error loading memories:', error);\n            const listContainer = document.getElementById(`memory-list-${agentId}`);\n            if (listContainer) {\n                listContainer.innerHTML = `\n                    <div class=\"text-center text-red-500 py-8\">\n                        <i data-lucide=\"alert-circle\" class=\"w-12 h-12 mx-auto mb-3\"></i>\n                        <p>Error loading memories</p>\n                    </div>\n                `;\n                lucide.createIcons();\n            }\n        }\n    }\n\n    /**\n     * Search agent memories\n     */\n    async searchAgentMemories(agentId, event) {\n        const query = event.target.value.trim();\n        if (!query) {\n            await this.loadAgentMemories(agentId);\n            return;\n        }\n\n        if (event.key !== 'Enter') return;\n\n        const listContainer = document.getElementById(`memory-list-${agentId}`);\n        listContainer.innerHTML = '<div class=\"text-center text-gray-500\"><div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto\"></div></div>';\n\n        const memories = await this.searchMemories(query, agentId);\n        \n        if (memories.length > 0) {\n            listContainer.innerHTML = memories.map(memory => `\n                <div class=\"bg-gray-50 rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow\">\n                    <div class=\"text-sm text-gray-800 mb-2\">${this.escapeHtml(memory.content)}</div>\n                    <div class=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span>Relevance: ${(memory.score * 100).toFixed(0)}%</span>\n                    </div>\n                </div>\n            `).join('');\n        } else {\n            listContainer.innerHTML = '<div class=\"text-center text-gray-500 py-8\">No matching memories found</div>';\n        }\n    }\n\n    /**\n     * Show add memory form\n     */\n    showAddMemoryForm(agentId) {\n        const formModal = document.createElement('div');\n        formModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';\n        formModal.innerHTML = `\n            <div class=\"bg-white rounded-lg p-6 max-w-2xl w-full\">\n                <h4 class=\"text-lg font-semibold mb-4\">Add Memory for ${getAgentName(agentId)}</h4>\n                <textarea id=\"new-memory-content\" \n                          class=\"w-full h-32 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\n                          placeholder=\"Enter memory content...\"></textarea>\n                <div class=\"mt-4 flex justify-end space-x-2\">\n                    <button onclick=\"this.closest('.fixed').remove()\" \n                            class=\"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg\">\n                        Cancel\n                    </button>\n                    <button onclick=\"memoryUI.saveNewMemory('${agentId}')\" \n                            class=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\">\n                        Save Memory\n                    </button>\n                </div>\n            </div>\n        `;\n        document.body.appendChild(formModal);\n        document.getElementById('new-memory-content').focus();\n    }\n\n    /**\n     * Save new memory\n     */\n    async saveNewMemory(agentId) {\n        const content = document.getElementById('new-memory-content').value.trim();\n        if (!content) {\n            this.showMemoryNotification('Please enter memory content', 'warning');\n            return;\n        }\n\n        const result = await this.addMemory(content, agentId);\n        if (result) {\n            document.querySelector('.fixed.z-60').remove(); // Close form\n            await this.loadAgentMemories(agentId); // Refresh list\n        }\n    }\n\n    /**\n     * Show memory notification\n     */\n    showMemoryNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg z-50 animate-slide-in ${\n            type === 'error' ? 'bg-red-500 text-white' : \n            type === 'success' ? 'bg-green-500 text-white' : \n            type === 'warning' ? 'bg-yellow-500 text-white' : \n            'bg-purple-500 text-white'\n        }`;\n        notification.innerHTML = `\n            <div class=\"flex items-center space-x-2\">\n                <i data-lucide=\"brain\" class=\"w-5 h-5\"></i>\n                <span>${message}</span>\n            </div>\n        `;\n        document.body.appendChild(notification);\n        lucide.createIcons();\n        \n        setTimeout(() => {\n            notification.style.opacity = '0';\n            notification.style.transition = 'opacity 0.3s';\n            setTimeout(() => notification.remove(), 300);\n        }, 3000);\n    }\n\n    /**\n     * Escape HTML\n     */\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    /**\n     * Initialize memory UI for all agents\n     */\n    initialize() {\n        // Add memory indicators to all agent chats\n        if (typeof agents !== 'undefined') {\n            agents.forEach(agent => {\n                this.addMemoryIndicator(agent.id);\n            });\n        }\n\n        // Add global memory status\n        this.addGlobalMemoryStatus();\n    }\n\n    /**\n     * Add global memory status indicator\n     */\n    addGlobalMemoryStatus() {\n        const header = document.querySelector('.main-header');\n        if (!header) return;\n\n        const statusDiv = document.createElement('div');\n        statusDiv.className = 'flex items-center space-x-2 text-sm';\n        statusDiv.innerHTML = `\n            <i data-lucide=\"brain\" class=\"w-4 h-4 text-purple-500\"></i>\n            <span class=\"text-gray-600\">Supermemory</span>\n            <span class=\"px-2 py-1 text-xs bg-green-100 text-green-700 rounded-full\">Connected</span>\n        `;\n\n        header.appendChild(statusDiv);\n        lucide.createIcons();\n    }\n}\n\n// Create global instance\nconst memoryUI = new MemoryUI();\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    memoryUI.initialize();\n});"
  ],
  "names": [],
  "mappings
}
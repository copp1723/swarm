{
  "version": 3,
  "file": "ux-enhancements.js",
  "sourceRoot": "",
  "sources": [
    "ux-enhancements.js"
  ],
  "sourcesContent": [
    "// UX Enhancement JavaScript - Improved accessibility and keyboard navigation\n\n// Initialize UX enhancements when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Add skip navigation link\n    addSkipNavigation();\n    \n    // Initialize keyboard shortcuts\n    initializeKeyboardShortcuts();\n    \n    // Add ARIA labels and roles\n    enhanceAccessibility();\n    \n    // Initialize theme toggle\n    initializeThemeToggle();\n    \n    // Add loading state handlers\n    initializeLoadingStates();\n    \n    // Enhance focus management\n    enhanceFocusManagement();\n    \n    // Add quick actions\n    addQuickActions();\n    \n    // Initialize tooltips\n    initializeTooltips();\n});\n\n// Add skip navigation link\nfunction addSkipNavigation() {\n    const skipNav = document.createElement('a');\n    skipNav.href = '#main';\n    skipNav.className = 'skip-nav sr-only focus:not-sr-only';\n    skipNav.textContent = 'Skip to main content';\n    skipNav.setAttribute('aria-label', 'Skip to main content');\n    document.body.insertBefore(skipNav, document.body.firstChild);\n}\n\n// Initialize keyboard shortcuts\nfunction initializeKeyboardShortcuts() {\n    const shortcuts = {\n        'ctrl+k': focusQuickSearch,\n        'ctrl+enter': sendFocusedMessage,\n        'ctrl+/': showKeyboardHelp,\n        'alt+1': () => focusAgent('planner_01'),\n        'alt+2': () => focusAgent('coder_01'),\n        'alt+3': () => focusAgent('tester_01'),\n        'alt+4': () => focusAgent('security_01'),\n        'alt+5': () => focusAgent('devops_01'),\n        'alt+6': () => focusAgent('general_01'),\n        'alt+c': focusCollaborationHub,\n        'alt+t': toggleTheme,\n        'escape': clearFocus\n    };\n    \n    document.addEventListener('keydown', function(e) {\n        const key = getKeyCombo(e);\n        \n        if (shortcuts[key]) {\n            e.preventDefault();\n            shortcuts[key]();\n        }\n    });\n    \n    // Add keyboard help button\n    const helpBtn = document.createElement('button');\n    helpBtn.className = 'keyboard-help-btn';\n    helpBtn.innerHTML = '<i data-lucide=\"keyboard\" class=\"w-4 h-4\"></i>';\n    helpBtn.setAttribute('aria-label', 'Keyboard shortcuts help');\n    helpBtn.setAttribute('data-tooltip', 'Keyboard shortcuts (Ctrl+/)');\n    helpBtn.onclick = showKeyboardHelp;\n    \n    const header = document.querySelector('header .flex.items-center.justify-between');\n    if (header) {\n        header.appendChild(helpBtn);\n    }\n}\n\n// Get key combination string\nfunction getKeyCombo(e) {\n    const keys = [];\n    if (e.ctrlKey || e.metaKey) keys.push('ctrl');\n    if (e.altKey) keys.push('alt');\n    if (e.shiftKey) keys.push('shift');\n    \n    let key = e.key.toLowerCase();\n    if (key === ' ') key = 'space';\n    keys.push(key);\n    \n    return keys.join('+');\n}\n\n// Focus quick search (create if doesn't exist)\nfunction focusQuickSearch() {\n    let searchInput = document.getElementById('quick-search');\n    if (!searchInput) {\n        createQuickSearch();\n        searchInput = document.getElementById('quick-search');\n    }\n    searchInput.focus();\n}\n\n// Create quick search overlay\nfunction createQuickSearch() {\n    const overlay = document.createElement('div');\n    overlay.className = 'quick-search-overlay';\n    overlay.innerHTML = `\n        <div class=\"quick-search-modal\">\n            <input type=\"text\" \n                   id=\"quick-search\" \n                   placeholder=\"Search agents, tasks, or commands...\" \n                   class=\"quick-search-input\"\n                   aria-label=\"Quick search\">\n            <div class=\"quick-search-results\" id=\"quick-search-results\"></div>\n            <div class=\"quick-search-footer\">\n                <span class=\"keyboard-shortcut\">ESC</span> to close\n                <span class=\"keyboard-shortcut\">\u2191\u2193</span> to navigate\n                <span class=\"keyboard-shortcut\">Enter</span> to select\n            </div>\n        </div>\n    `;\n    \n    overlay.addEventListener('click', function(e) {\n        if (e.target === overlay) {\n            overlay.remove();\n        }\n    });\n    \n    document.body.appendChild(overlay);\n    \n    const searchInput = document.getElementById('quick-search');\n    searchInput.addEventListener('input', performQuickSearch);\n    searchInput.addEventListener('keydown', handleQuickSearchNav);\n}\n\n// Send message from focused input\nfunction sendFocusedMessage() {\n    const focusedElement = document.activeElement;\n    if (focusedElement && focusedElement.classList.contains('chat-input')) {\n        const agentId = focusedElement.id.replace('input-', '');\n        sendMessageButton(agentId);\n    }\n}\n\n// Show keyboard shortcuts help\nfunction showKeyboardHelp() {\n    const helpModal = document.createElement('div');\n    helpModal.className = 'keyboard-help-modal';\n    helpModal.innerHTML = `\n        <div class=\"keyboard-help-content\">\n            <h3>Keyboard Shortcuts</h3>\n            <button class=\"close-btn\" onclick=\"this.parentElement.parentElement.remove()\">\u00d7</button>\n            <div class=\"shortcuts-grid\">\n                <div class=\"shortcut-item\">\n                    <span class=\"keyboard-shortcut\">Ctrl + K</span>\n                    <span>Quick search</span>\n                </div>\n                <div class=\"shortcut-item\">\n                    <span class=\"keyboard-shortcut\">Ctrl + Enter</span>\n                    <span>Send message</span>\n                </div>\n                <div class=\"shortcut-item\">\n                    <span class=\"keyboard-shortcut\">Alt + 1-6</span>\n                    <span>Focus agent 1-6</span>\n                </div>\n                <div class=\"shortcut-item\">\n                    <span class=\"keyboard-shortcut\">Alt + C</span>\n                    <span>Focus collaboration hub</span>\n                </div>\n                <div class=\"shortcut-item\">\n                    <span class=\"keyboard-shortcut\">Alt + T</span>\n                    <span>Toggle theme</span>\n                </div>\n                <div class=\"shortcut-item\">\n                    <span class=\"keyboard-shortcut\">Tab</span>\n                    <span>Navigate forward</span>\n                </div>\n                <div class=\"shortcut-item\">\n                    <span class=\"keyboard-shortcut\">Shift + Tab</span>\n                    <span>Navigate backward</span>\n                </div>\n                <div class=\"shortcut-item\">\n                    <span class=\"keyboard-shortcut\">Escape</span>\n                    <span>Clear focus / Close modals</span>\n                </div>\n            </div>\n        </div>\n    `;\n    document.body.appendChild(helpModal);\n}\n\n// Focus specific agent\nfunction focusAgent(agentId) {\n    const agentInput = document.getElementById(`input-${agentId}`);\n    if (agentInput) {\n        agentInput.focus();\n        agentInput.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n}\n\n// Focus collaboration hub\nfunction focusCollaborationHub() {\n    const collabTask = document.getElementById('collab-task');\n    if (collabTask) {\n        collabTask.focus();\n        collabTask.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n}\n\n// Clear focus\nfunction clearFocus() {\n    document.activeElement.blur();\n    // Close any open modals\n    document.querySelectorAll('.quick-search-overlay, .keyboard-help-modal').forEach(el => el.remove());\n}\n\n// Enhance accessibility with ARIA labels and roles\nfunction enhanceAccessibility() {\n    // Add ARIA labels to all buttons without text\n    document.querySelectorAll('button').forEach(btn => {\n        if (!btn.textContent.trim() && !btn.getAttribute('aria-label')) {\n            const icon = btn.querySelector('i[data-lucide]');\n            if (icon) {\n                const iconName = icon.getAttribute('data-lucide');\n                btn.setAttribute('aria-label', iconName.replace('-', ' '));\n            }\n        }\n    });\n    \n    // Add ARIA live regions for dynamic content\n    const dynamicAreas = [\n        { selector: '#collab-results', politeness: 'polite' },\n        { selector: '.chat-area', politeness: 'polite' },\n        { selector: '.status-indicator', politeness: 'assertive' }\n    ];\n    \n    dynamicAreas.forEach(area => {\n        document.querySelectorAll(area.selector).forEach(el => {\n            el.setAttribute('aria-live', area.politeness);\n            el.setAttribute('aria-atomic', 'true');\n        });\n    });\n    \n    // Add proper roles\n    document.querySelector('main')?.setAttribute('role', 'main');\n    document.querySelector('header')?.setAttribute('role', 'banner');\n    \n    // Label form elements\n    document.querySelectorAll('input, select, textarea').forEach(input => {\n        if (!input.getAttribute('aria-label') && !input.labels?.length) {\n            const placeholder = input.getAttribute('placeholder');\n            if (placeholder) {\n                input.setAttribute('aria-label', placeholder);\n            }\n        }\n    });\n    \n    // Mark decorative icons\n    document.querySelectorAll('i[data-lucide]').forEach(icon => {\n        if (!icon.closest('button') && !icon.closest('a')) {\n            icon.setAttribute('aria-hidden', 'true');\n        }\n    });\n}\n\n// Initialize theme toggle\nfunction initializeThemeToggle() {\n    // Check for saved theme preference\n    const savedTheme = localStorage.getItem('theme') || 'light';\n    document.documentElement.setAttribute('data-theme', savedTheme);\n    \n    // Create theme toggle button\n    const themeToggle = document.createElement('button');\n    themeToggle.className = 'theme-toggle-btn';\n    themeToggle.innerHTML = savedTheme === 'dark' \n        ? '<i data-lucide=\"sun\" class=\"w-4 h-4\"></i>' \n        : '<i data-lucide=\"moon\" class=\"w-4 h-4\"></i>';\n    themeToggle.setAttribute('aria-label', 'Toggle theme');\n    themeToggle.setAttribute('data-tooltip', 'Toggle theme (Alt+T)');\n    themeToggle.onclick = toggleTheme;\n    \n    const header = document.querySelector('header .flex.items-center.space-x-2');\n    if (header) {\n        header.appendChild(themeToggle);\n    }\n}\n\n// Toggle theme\nfunction toggleTheme() {\n    const currentTheme = document.documentElement.getAttribute('data-theme');\n    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n    \n    document.documentElement.setAttribute('data-theme', newTheme);\n    localStorage.setItem('theme', newTheme);\n    \n    // Update toggle button icon\n    const themeToggle = document.querySelector('.theme-toggle-btn');\n    if (themeToggle) {\n        themeToggle.innerHTML = newTheme === 'dark' \n            ? '<i data-lucide=\"sun\" class=\"w-4 h-4\"></i>' \n            : '<i data-lucide=\"moon\" class=\"w-4 h-4\"></i>';\n        \n        // Re-initialize Lucide icons\n        if (window.lucide) {\n            lucide.createIcons();\n        }\n    }\n    \n    // Announce theme change to screen readers\n    announceToScreenReader(`Theme changed to ${newTheme} mode`);\n}\n\n// Initialize loading states\nfunction initializeLoadingStates() {\n    // Intercept fetch to add loading states\n    const originalFetch = window.fetch;\n    window.fetch = async function(...args) {\n        const url = args[0];\n        \n        // Add loading class to relevant elements\n        if (url.includes('/api/agents/chat/')) {\n            const agentId = url.split('/').pop();\n            const agentWindow = document.getElementById(agentId);\n            agentWindow?.classList.add('loading');\n        }\n        \n        try {\n            const response = await originalFetch.apply(this, args);\n            return response;\n        } finally {\n            // Remove loading classes\n            document.querySelectorAll('.loading').forEach(el => {\n                el.classList.remove('loading');\n            });\n        }\n    };\n}\n\n// Enhance focus management\nfunction enhanceFocusManagement() {\n    // Trap focus in modals\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Tab') {\n            const modal = document.querySelector('.quick-search-overlay, .keyboard-help-modal');\n            if (modal) {\n                trapFocus(e, modal);\n            }\n        }\n    });\n    \n    // Improve focus ring visibility\n    document.addEventListener('mousedown', () => {\n        document.body.classList.add('mouse-nav');\n    });\n    \n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Tab') {\n            document.body.classList.remove('mouse-nav');\n        }\n    });\n}\n\n// Trap focus within element\nfunction trapFocus(e, container) {\n    const focusableElements = container.querySelectorAll(\n        'a[href], button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    const firstFocusable = focusableElements[0];\n    const lastFocusable = focusableElements[focusableElements.length - 1];\n    \n    if (e.shiftKey && document.activeElement === firstFocusable) {\n        e.preventDefault();\n        lastFocusable.focus();\n    } else if (!e.shiftKey && document.activeElement === lastFocusable) {\n        e.preventDefault();\n        firstFocusable.focus();\n    }\n}\n\n// Add quick action buttons\nfunction addQuickActions() {\n    const quickActions = document.createElement('div');\n    quickActions.className = 'quick-actions';\n    quickActions.innerHTML = `\n        <button class=\"quick-action-btn\" \n                aria-label=\"New collaboration\" \n                data-tooltip=\"New collaboration\"\n                onclick=\"focusCollaborationHub()\">\n            <i data-lucide=\"plus\" class=\"w-6 h-6\"></i>\n        </button>\n        <button class=\"quick-action-btn secondary\" \n                aria-label=\"Quick search\" \n                data-tooltip=\"Quick search (Ctrl+K)\"\n                onclick=\"focusQuickSearch()\">\n            <i data-lucide=\"search\" class=\"w-6 h-6\"></i>\n        </button>\n    `;\n    \n    document.body.appendChild(quickActions);\n    \n    // Re-initialize Lucide icons\n    if (window.lucide) {\n        lucide.createIcons();\n    }\n}\n\n// Initialize tooltips\nfunction initializeTooltips() {\n    // Simple CSS-based tooltips are already handled by data-tooltip attribute\n    // This function can be extended for more complex tooltip functionality\n}\n\n// Announce to screen readers\nfunction announceToScreenReader(message) {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('role', 'status');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.className = 'sr-only';\n    announcement.textContent = message;\n    \n    document.body.appendChild(announcement);\n    \n    setTimeout(() => {\n        announcement.remove();\n    }, 1000);\n}\n\n// Add necessary styles\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = `\n/* Quick Search Overlay */\n.quick-search-overlay {\n    position: fixed;\n    inset: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n    padding-top: 10vh;\n    z-index: 1000;\n}\n\n.quick-search-modal {\n    background: var(--bg-primary);\n    border-radius: 12px;\n    box-shadow: var(--shadow-xl);\n    width: 90%;\n    max-width: 600px;\n    max-height: 70vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.quick-search-input {\n    padding: var(--space-lg);\n    border: none;\n    border-bottom: 1px solid var(--border-color);\n    font-size: 1.125rem;\n    background: transparent;\n    color: var(--text-primary);\n}\n\n.quick-search-results {\n    flex: 1;\n    overflow-y: auto;\n    padding: var(--space-md);\n}\n\n.quick-search-footer {\n    padding: var(--space-md);\n    border-top: 1px solid var(--border-color);\n    display: flex;\n    gap: var(--space-md);\n    font-size: 0.875rem;\n    color: var(--text-secondary);\n}\n\n/* Keyboard Help Modal */\n.keyboard-help-modal {\n    position: fixed;\n    inset: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n}\n\n.keyboard-help-content {\n    background: var(--bg-primary);\n    border-radius: 12px;\n    padding: var(--space-xl);\n    max-width: 600px;\n    max-height: 80vh;\n    overflow-y: auto;\n    position: relative;\n}\n\n.keyboard-help-content h3 {\n    margin: 0 0 var(--space-lg);\n    color: var(--text-primary);\n}\n\n.close-btn {\n    position: absolute;\n    top: var(--space-md);\n    right: var(--space-md);\n    background: none;\n    border: none;\n    font-size: 1.5rem;\n    color: var(--text-secondary);\n    cursor: pointer;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n}\n\n.close-btn:hover {\n    background: var(--bg-secondary);\n}\n\n.shortcuts-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: var(--space-md);\n}\n\n.shortcut-item {\n    display: flex;\n    align-items: center;\n    gap: var(--space-md);\n    color: var(--text-secondary);\n}\n\n/* Theme Toggle Button */\n.theme-toggle-btn,\n.keyboard-help-btn {\n    background: none;\n    border: none;\n    padding: var(--space-sm);\n    border-radius: 8px;\n    color: var(--text-secondary);\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n\n.theme-toggle-btn:hover,\n.keyboard-help-btn:hover {\n    background: var(--bg-secondary);\n    color: var(--text-primary);\n}\n\n/* Mouse navigation - hide focus rings */\nbody.mouse-nav *:focus {\n    outline: none;\n}\n\nbody.mouse-nav *:focus-visible {\n    outline: 2px solid var(--border-focus);\n}\n\n/* Loading enhancements */\n.agent-window.loading {\n    position: relative;\n}\n\n.agent-window.loading::after {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    background: rgba(255, 255, 255, 0.8);\n    border-radius: inherit;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n[data-theme=\"dark\"] .agent-window.loading::after {\n    background: rgba(0, 0, 0, 0.8);\n}\n`;\n\ndocument.head.appendChild(styleSheet);"
  ],
  "names": [],
  "mappings
}